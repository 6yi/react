{"version":3,"sources":["webpack:///path---docs-react-api-html-e39c5cc91012cfbbb0bb.js","webpack:///./.cache/json/docs-react-api-html.json"],"names":["webpackJsonp","920","module","exports","data","markdownRemark","html","frontmatter","title","next","prev","fields","path","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAA2ioDC,aAA4LC,MAAA,eAAAC,KAAA,KAAAC,KAAA,MAA+CC,QAAWC,KAAA,0BAAAC,KAAA,yBAAgEC,aAAgBD,KAAA","file":"path---docs-react-api-html-e39c5cc91012cfbbb0bb.js","sourcesContent":["webpackJsonp([93598318429237],{\n\n/***/ 920:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><code class=\\\"gatsby-code-text\\\">react</code> 是React库的入口点。如果你通过 <code class=\\\"gatsby-code-text\\\">&lt;script&gt;</code> 标签加载React，这些顶层API可用于 <code class=\\\"gatsby-code-text\\\">React</code> 全局。如果你使用ES6，你可以使用 <code class=\\\"gatsby-code-text\\\">import React from &#39;react&#39;</code>。如果你使用ES5，你可以使用 <code class=\\\"gatsby-code-text\\\">var React = require(&#39;react&#39;)</code> 。</p>\\n<h2 id=\\\"概览\\\"><a href=\\\"#%E6%A6%82%E8%A7%88\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>概览</h2>\\n<h3 id=\\\"components\\\"><a href=\\\"#components\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Components</h3>\\n<p>React 组件可以让你把UI分割为独立、可复用的片段，并将每一片段视为相互独立的部分。React组件可以通过继承 <code class=\\\"gatsby-code-text\\\">React.Component</code> 或 <code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 来定义。</p>\\n<ul>\\n<li><a href=\\\"#react.component\\\"><code class=\\\"gatsby-code-text\\\">React.Component</code></a></li>\\n<li><a href=\\\"#react.purecomponent\\\"><code class=\\\"gatsby-code-text\\\">React.PureComponent</code></a></li>\\n</ul>\\n<p>如果不用ES6类，你可以使用 <code class=\\\"gatsby-code-text\\\">create-react-class</code> 模块。参阅 <a href=\\\"/docs/react-without-es6.html\\\">Using React without JSX</a> 了解更多信息。</p>\\n<p>React components can also be defined as functions which can be wrapped:</p>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactmemo\\\"><code class=\\\"gatsby-code-text\\\">React.memo</code></a></li>\\n</ul>\\n<h3 id=\\\"creating-react-elements\\\"><a href=\\\"#creating-react-elements\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creating React Elements</h3>\\n<p>推荐 <a href=\\\"/docs/introducing-jsx.html\\\">使用JSX</a> 描述你的UI外观。每个JSX元素仅是调用 <a href=\\\"#createelement\\\"><code class=\\\"gatsby-code-text\\\">React.createElement</code></a> 的语法糖。如果使用了JSX，你通常不会直接调用以下方法。</p>\\n<ul>\\n<li><a href=\\\"#createelement\\\"><code class=\\\"gatsby-code-text\\\">createElement()</code></a></li>\\n<li><a href=\\\"#createfactory\\\"><code class=\\\"gatsby-code-text\\\">createFactory()</code></a></li>\\n</ul>\\n<p>参阅 <a href=\\\"/docs/react-without-jsx.html\\\">Using React without JSX</a> 了解更多。</p>\\n<h3 id=\\\"transforming-elements\\\"><a href=\\\"#transforming-elements\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transforming Elements</h3>\\n<p><code class=\\\"gatsby-code-text\\\">React</code> 提供了几个API用于操纵元素：</p>\\n<ul>\\n<li><a href=\\\"#cloneelement\\\"><code class=\\\"gatsby-code-text\\\">cloneElement()</code></a></li>\\n<li><a href=\\\"#isvalidelement\\\"><code class=\\\"gatsby-code-text\\\">isValidElement()</code></a></li>\\n<li><a href=\\\"#react.children\\\"><code class=\\\"gatsby-code-text\\\">React.Children</code></a></li>\\n</ul>\\n<h3 id=\\\"fragments\\\"><a href=\\\"#fragments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fragments</h3>\\n<p><code class=\\\"gatsby-code-text\\\">React</code> also provides a component for rendering multiple elements without a wrapper.</p>\\n<ul>\\n<li><a href=\\\"#reactfragment\\\"><code class=\\\"gatsby-code-text\\\">React.Fragment</code></a></li>\\n</ul>\\n<h3 id=\\\"refs\\\"><a href=\\\"#refs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refs</h3>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactcreateref\\\"><code class=\\\"gatsby-code-text\\\">React.createRef</code></a></li>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactforwardref\\\"><code class=\\\"gatsby-code-text\\\">React.forwardRef</code></a></li>\\n</ul>\\n<h3 id=\\\"suspense\\\"><a href=\\\"#suspense\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Suspense</h3>\\n<p>Suspense lets components “wait” for something before rendering. Today, Suspense only supports one use case: <a href=\\\"https://reactjs.org/docs/code-splitting.html#reactlazy\\\">loading components dynamically with <code class=\\\"gatsby-code-text\\\">React.lazy</code></a>. In the future, it will support other use cases like data fetching.</p>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactlazy\\\"><code class=\\\"gatsby-code-text\\\">React.lazy</code></a></li>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactsuspense\\\"><code class=\\\"gatsby-code-text\\\">React.Suspense</code></a></li>\\n</ul>\\n<hr>\\n<h2 id=\\\"reference\\\"><a href=\\\"#reference\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reference</h2>\\n<h3 id=\\\"reactcomponent\\\"><a href=\\\"#reactcomponent\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Component</code></h3>\\n<p>用 <a href=\\\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\\\">ES6 类</a> 定义时，<code class=\\\"gatsby-code-text\\\">React.Component</code>是React组件的基类。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>有关基类 <code class=\\\"gatsby-code-text\\\">React.Component</code> 的方法和属性列表，请参阅 <a href=\\\"/docs/react-component.html\\\"><code class=\\\"gatsby-code-text\\\">React.Component API Reference</code></a>。</p>\\n<hr>\\n<h3 id=\\\"reactpurecomponent\\\"><a href=\\\"#reactpurecomponent\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.PureComponent</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 类似于 <a href=\\\"#react.component\\\"><code class=\\\"gatsby-code-text\\\">React.Component</code></a>。它们的不同之处在于<a href=\\\"https://reactjs.org/docs/react-api.html#reactcomponent\\\"><code class=\\\"gatsby-code-text\\\">React.Component</code></a> 没有实现 <a href=\\\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\\\"><code class=\\\"gatsby-code-text\\\">shouldComponentUpdate()</code></a>，但是 <code class=\\\"gatsby-code-text\\\">React.PureComponent</code>实现了它。采用对属性和状态用浅比较的方式。</p>\\n<p>如果React组件的 <code class=\\\"gatsby-code-text\\\">render()</code> 函数在给定相同的props和state下渲染为相同的结果，在某些场景下你可以使用 <code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 来提升性能。</p>\\n<blockquote>\\n<p>注意</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 的 <code class=\\\"gatsby-code-text\\\">shouldComponentUpdate()</code> 只会对对象进行浅对比。如果对象包含复杂的数据结构，它可能会因深层的数据不同而产生漏报判断。仅当你知道拥有的是简单的属性和状态时，才去继承 <code class=\\\"gatsby-code-text\\\">PureComponent</code>，或者在你知道深层的数据结构已经发生改变时使用 <a href=\\\"/docs/react-component.html#forceupdate\\\"><code class=\\\"gatsby-code-text\\\">forceUpate()</code></a>。或者，考虑使用 <a href=\\\"https://facebook.github.io/immutable-js/\\\">不可变对象</a> 来促进嵌套数据的快速比较。</p>\\n<p>此外,<code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 的 <code class=\\\"gatsby-code-text\\\">shouldComponentUpdate()</code> 会略过为整个组件的子树更新属性。请确保所有的子级组件也是”纯”的。</p>\\n</blockquote>\\n<hr>\\n<h3 id=\\\"reactmemo\\\"><a href=\\\"#reactmemo\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.memo</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> MyComponent <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">memo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyComponent</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* render using props */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">React.memo</code> is a <a href=\\\"https://reactjs.org/docs/higher-order-components.html\\\">higher order component</a>. It’s similar to <a href=\\\"https://reactjs.org/docs/react-api.html#reactpurecomponent\\\"><code class=\\\"gatsby-code-text\\\">React.PureComponent</code></a> but for function components instead of classes.</p>\\n<p>If your function component renders the same result given the same props, you can wrap it in a call to <code class=\\\"gatsby-code-text\\\">React.memo</code> for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.</p>\\n<p>By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyComponent</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* render using props */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">areEqual</span><span class=\\\"token punctuation\\\">(</span>prevProps<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/*\\n  return true if passing nextProps to render would return\\n  the same result as passing prevProps to render,\\n  otherwise return false\\n  */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">memo</span><span class=\\\"token punctuation\\\">(</span>MyComponent<span class=\\\"token punctuation\\\">,</span> areEqual<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This method only exists as a <strong>performance optimization.</strong> Do not rely on it to “prevent” a render, as this can lead to bugs.</p>\\n<blockquote>\\n<p>Note</p>\\n<p>Unlike the <a href=\\\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\\\"><code class=\\\"gatsby-code-text\\\">shouldComponentUpdate()</code></a> method on class components, the <code class=\\\"gatsby-code-text\\\">areEqual</code> function returns <code class=\\\"gatsby-code-text\\\">true</code> if the props are equal and <code class=\\\"gatsby-code-text\\\">false</code> if the props are not equal. This is the inverse from <code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>.</p>\\n</blockquote>\\n<hr>\\n<h3 id=\\\"createelement\\\"><a href=\\\"#createelement\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">createElement()</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>\\n  type<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>props<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>创建并返回给定类型的新 <a href=\\\"/docs/rendering-elements.html\\\"><code class=\\\"gatsby-code-text\\\">React element</code></a> 。参数type既可以是一个标签名称字符串(例如<code class=\\\"gatsby-code-text\\\">&#39;div&#39;</code> 或 <code class=\\\"gatsby-code-text\\\">&#39;span&#39;</code> )，也可以是一个 <a href=\\\"/docs/components-and-props.html\\\"><code class=\\\"gatsby-code-text\\\">React component</code></a> 类型(一个类或一个函数)，或者一个<a href=\\\"https://reactjs.org/docs/react-api.html#reactfragment\\\">React fragment</a> 类型。</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.DOM</code> 提供了DOM组件的 <code class=\\\"gatsby-code-text\\\">React.createElement()</code> 的便捷包装。举个例子，<code class=\\\"gatsby-code-text\\\">React.DOM.a(...)</code> 是 <code class=\\\"gatsby-code-text\\\">React.createELement(&#39;a&#39;, ...)</code> 的一个便捷包装。这个用法被认为是过时的，我们推荐您使用JSX，或者直接使用 <code class=\\\"gatsby-code-text\\\">React.createElement()</code> 。</p>\\n<p>用 <a href=\\\"/docs/introducing-jsx.html\\\"><code class=\\\"gatsby-code-text\\\">JSX</code></a> 编写的代码会被转换成用 <code class=\\\"gatsby-code-text\\\">React.createElement()</code> 实现。如果使用了JSX，你通常不会直接调用 <code class=\\\"gatsby-code-text\\\">React.createElement()</code>。参阅 <a href=\\\"/docs/react-without-jsx.html\\\"><code class=\\\"gatsby-code-text\\\">React Without JSX</code></a> 了解更多。</p>\\n<hr>\\n<h3 id=\\\"cloneelement\\\"><a href=\\\"#cloneelement\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">cloneElement()</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cloneElement</span><span class=\\\"token punctuation\\\">(</span>\\n  element<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>props<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>克隆并返回一个新的React元素(React Element)，使用 <code class=\\\"gatsby-code-text\\\">element</code> 作为起点。生成的元素将会拥有原始元素props与新props的浅合并。新的子级会替换现有的子级。来自原始元素的 <code class=\\\"gatsby-code-text\\\">key</code> 和 <code class=\\\"gatsby-code-text\\\">ref</code> 将会保留。</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.cloneElement()</code> 几乎相当于：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>element.type</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">element</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>element.type</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>然而，它也保留了全部的 <code class=\\\"gatsby-code-text\\\">ref</code>。这意味着，如果你通过 <code class=\\\"gatsby-code-text\\\">ref</code> 获取到孩子时，不会偶然从祖先组件里窃取了它。你将获得同一个<code class=\\\"gatsby-code-text\\\">ref</code>附着到你的新元素。</p>\\n<p>引入这个API用来替换已弃用的 <code class=\\\"gatsby-code-text\\\">React.addons.cloneWithProps()</code>。</p>\\n<hr>\\n<h3 id=\\\"createfactory\\\"><a href=\\\"#createfactory\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">createFactory()</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createFactory</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>返回一个函数，此函数创建给定类型的React元素。类似 <a href=\\\"#createElement\\\"><code class=\\\"gatsby-code-text\\\">React.createElement</code></a>，类型参数既可以是一个标签名称字符串(such as <code class=\\\"gatsby-code-text\\\">&#39;div&#39;</code> or <code class=\\\"gatsby-code-text\\\">&#39;span&#39;</code>)，也可以是一个 <a href=\\\"/docs/components-and-props.html\\\"><code class=\\\"gatsby-code-text\\\">React component</code></a> 类型(一个类或一个函数)，或者一个<a href=\\\"https://reactjs.org/docs/react-api.html#reactfragment\\\">React fragment</a>类型。</p>\\n<p>这个方法被认为是遗留的，我们鼓励你使用JSX或直接使用 <code class=\\\"gatsby-code-text\\\">React.createElement()</code> 来替代它。</p>\\n<p>如果使用了JSX，你通常不会直接调用<code class=\\\"gatsby-code-text\\\">React.createFactory()</code> 。参阅 <a href=\\\"/docs/react-without-jsx.html\\\"><code class=\\\"gatsby-code-text\\\">React Without JSX</code></a>了解更多 。</p>\\n<hr>\\n<h3 id=\\\"isvalidelement\\\"><a href=\\\"#isvalidelement\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">isValidElement()</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isValidElement</span><span class=\\\"token punctuation\\\">(</span>object<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>验证对象是否是一个React元素。返回 <code class=\\\"gatsby-code-text\\\">true</code> 或 <code class=\\\"gatsby-code-text\\\">false</code> 。</p>\\n<hr>\\n<h3 id=\\\"reactchildren\\\"><a href=\\\"#reactchildren\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.Children</code> 提供了处理 <code class=\\\"gatsby-code-text\\\">this.props.children</code> 这个不透明数据结构的工具。</p>\\n<h4 id=\\\"reactchildrenmap\\\"><a href=\\\"#reactchildrenmap\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.map</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>在包含在 <code class=\\\"gatsby-code-text\\\">children</code> 里的每个直接孩子上调用一个函数，并且<code class=\\\"gatsby-code-text\\\">this</code> 设置为 <code class=\\\"gatsby-code-text\\\">thisArg</code> 。如果 <code class=\\\"gatsby-code-text\\\">children</code> 是一个数组它将被遍历，函数将被调用为每个数组中的孩子。如果 <code class=\\\"gatsby-code-text\\\">children</code> 是 <code class=\\\"gatsby-code-text\\\">null</code> 或 <code class=\\\"gatsby-code-text\\\">undefined</code> ，这个方法将返回 <code class=\\\"gatsby-code-text\\\">null</code> 或 <code class=\\\"gatsby-code-text\\\">undefined</code> 而不是一个数组。</p>\\n<blockquote>\\n<p>注意</p>\\n<p>如果 <code class=\\\"gatsby-code-text\\\">children</code> 是一个 <code class=\\\"gatsby-code-text\\\">Fragment</code>，它将被当作单独一个孩子，不会被遍历。</p>\\n</blockquote>\\n<h4 id=\\\"reactchildrenforeach\\\"><a href=\\\"#reactchildrenforeach\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.forEach</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>类似 <a href=\\\"#react.children.map\\\"><code class=\\\"gatsby-code-text\\\">React.Children.map()</code></a> ，但是不返回数组。</p>\\n<h4 id=\\\"reactchildrencount\\\"><a href=\\\"#reactchildrencount\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.count</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">count</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>返回 <code class=\\\"gatsby-code-text\\\">children</code> 中的组件总数，等于传给 <code class=\\\"gatsby-code-text\\\">map</code> 或 <code class=\\\"gatsby-code-text\\\">forEach</code> 的回调函数被调用的次数。</p>\\n<h4 id=\\\"reactchildrenonly\\\"><a href=\\\"#reactchildrenonly\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.only</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">only</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>验证<code class=\\\"gatsby-code-text\\\">children</code>只有唯一一个孩子（React元素）并返回它。否则这个方法扔抛出一个错误。</p>\\n<blockquote>\\n<p>注意</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.Children.only()</code> 不接受 the return value of <a href=\\\"https://reactjs.org/docs/react-api.html#reactchildrenmap\\\"><code class=\\\"gatsby-code-text\\\">React.Children.map()</code></a> 因为它是一个数组而不是一个React元素。</p>\\n</blockquote>\\n<h4 id=\\\"reactchildrentoarray\\\"><a href=\\\"#reactchildrentoarray\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.toArray</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>返回<code class=\\\"gatsby-code-text\\\">children</code> 不透明的数据结构作为一个扁平数组，并将键赋给每个孩子。一个用途是当你打算在渲染方法里操纵子代集合时，特别是你想在 <code class=\\\"gatsby-code-text\\\">this.props.children</code> 传下它之前对它重新排序或切片。</p>\\n<blockquote>\\n<p>注意</p>\\n<p>当扁平化子代列表时，<code class=\\\"gatsby-code-text\\\">React.Children.toArray()</code> 改变key来保留嵌套数组的语义。也就是说，<code class=\\\"gatsby-code-text\\\">toArray</code> 会给被返回的数组中的每个键加上前缀。这样每个元素的键会应用作用域到它的输入数组。</p>\\n</blockquote>\\n<hr>\\n<h3 id=\\\"reactfragment\\\"><a href=\\\"#reactfragment\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Fragment</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.Fragment</code> 组件让你在一个<code class=\\\"gatsby-code-text\\\">render()</code> 方法中返回多个元素，而不用创造一个额外的 DOM 元素：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>React.Fragment</span><span class=\\\"token punctuation\\\">></span></span>\\n      Some text<span class=\\\"token punctuation\\\">.</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h2</span><span class=\\\"token punctuation\\\">></span></span>A heading<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h2</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>React.Fragment</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You can also use it with the shorthand <code class=\\\"gatsby-code-text\\\">&lt;&gt;&lt;/&gt;</code> syntax. For more information, see <a href=\\\"/blog/2017/11/28/react-v16.2.0-fragment-support.html\\\">React v16.2.0: Improved Support for Fragments</a>.</p>\\n<h3 id=\\\"reactcreateref\\\"><a href=\\\"#reactcreateref\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.createRef</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.createRef</code> creates a <a href=\\\"/docs/refs-and-the-dom.html\\\">ref</a> that can be attached to React elements via the ref attribute.\\n<div class=\\\"gatsby-highlight\\\">\\n        <pre class=\\\"gatsby-code-jsx\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>inputRef <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>inputRef<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>inputRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n        </div></p>\\n<h3 id=\\\"reactforwardref\\\"><a href=\\\"#reactforwardref\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.forwardRef</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.forwardRef</code> creates a React component that forwards the <a href=\\\"/docs/refs-and-the-dom.html\\\">ref</a> attribute it receives to another component below in the tree. This technique is not very common but is particularly useful in two scenarios:</p>\\n<ul>\\n<li><a href=\\\"/docs/forwarding-refs.html#forwarding-refs-to-dom-components\\\">Forwarding refs to DOM components</a></li>\\n<li><a href=\\\"/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components\\\">Forwarding refs in higher-order-components</a></li>\\n</ul>\\n<p><code class=\\\"gatsby-code-text\\\">React.forwardRef</code> accepts a rendering function as an argument. React will call this function with <code class=\\\"gatsby-code-text\\\">props</code> and <code class=\\\"gatsby-code-text\\\">ref</code> as two arguments. This function should return a React node.</p>\\n<p><div class=\\\"gatsby-highlight\\\">\\n        <pre class=\\\"gatsby-code-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Enhanced</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>forwardedRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token comment\\\">// Assign the custom prop \\\"forwardedRef\\\" as a ref</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span> <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>forwardedRef<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">rest</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Intercept the \\\"ref\\\" and pass it as a custom prop, e.g. \\\"forwardedRef\\\"</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">enhanceForwardRef</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> ref<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Enhanced</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">forwardedRef</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>ref<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token punctuation\\\">}</span>\\n</span>\\n  <span class=\\\"token comment\\\">// These next lines are not necessary,</span>\\n  <span class=\\\"token comment\\\">// But they do give the component a better display name in DevTools,</span>\\n  <span class=\\\"token comment\\\">// e.g. \\\"ForwardRef(withTheme(MyComponent))\\\"</span>\\n  <span class=\\\"token keyword\\\">const</span> name <span class=\\\"token operator\\\">=</span> Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">;</span>\\n  enhanceForwardRef<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`enhance(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">return</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forwardRef</span><span class=\\\"token punctuation\\\">(</span>enhanceForwardRef<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n        </div></p>\\n<p>In the above example, React passes a <code class=\\\"gatsby-code-text\\\">ref</code> given to <code class=\\\"gatsby-code-text\\\">&lt;FancyButton ref={ref}&gt;</code> element as a second argument to the rendering function inside the <code class=\\\"gatsby-code-text\\\">React.forwardRef</code> call. This rendering function passes the <code class=\\\"gatsby-code-text\\\">ref</code> to the <code class=\\\"gatsby-code-text\\\">&lt;button ref={ref}&gt;</code> element.</p>\\n<p>As a result, after React attaches the ref, <code class=\\\"gatsby-code-text\\\">ref.current</code> will point directly to the <code class=\\\"gatsby-code-text\\\">&lt;button&gt;</code> DOM element instance.</p>\\n<p>For more information, see <a href=\\\"/docs/forwarding-refs.html\\\">forwarding refs</a>.</p>\\n<h3 id=\\\"reactlazy\\\"><a href=\\\"#reactlazy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.lazy</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.lazy()</code> lets you define a component that is loaded dynamically. This helps reduce the bundle size to delay loading components that aren’t used during the initial render.</p>\\n<p>You can learn how to use it from our <a href=\\\"/docs/code-splitting.html#reactlazy\\\">code splitting documentation</a>. You might also want to check out <a href=\\\"https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d\\\">this article</a> explaining how to use it in more detail.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// This component is loaded dynamically</span>\\n<span class=\\\"token keyword\\\">const</span> SomeComponent <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./SomeComponent'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Note that rendering <code class=\\\"gatsby-code-text\\\">lazy</code> components requires that there’s a <code class=\\\"gatsby-code-text\\\">&lt;React.Suspense&gt;</code> component higher in the rendering tree. This is how you specify a loading indicator.</p>\\n<blockquote>\\n<p><strong>Note</strong></p>\\n<p>Using <code class=\\\"gatsby-code-text\\\">React.lazy</code>with dynamic import requires Promises to be available in the JS environment. This requires a polyfill on IE11 and below.</p>\\n</blockquote>\\n<h3 id=\\\"reactsuspense\\\"><a href=\\\"#reactsuspense\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Suspense</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.Suspense</code> let you specify the loading indicator in case some components in the tree below it are not yet ready to render. Today, lazy loading components is the <strong>only</strong> use case supported by <code class=\\\"gatsby-code-text\\\">&lt;React.Suspense&gt;</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// This component is loaded dynamically</span>\\n<span class=\\\"token keyword\\\">const</span> OtherComponent <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./OtherComponent'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyComponent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token comment\\\">// Displays &lt;Spinner> until OtherComponent loads</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>React.Suspense</span> <span class=\\\"token attr-name\\\">fallback</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Spinner</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>OtherComponent</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>React.Suspense</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>It is documented in our <a href=\\\"/docs/code-splitting.html#reactlazy\\\">code splitting guide</a>. Note that <code class=\\\"gatsby-code-text\\\">lazy</code> components can be deep inside the <code class=\\\"gatsby-code-text\\\">Suspense</code> tree — it doesn’t have to wrap every one of them. The best practice is to place <code class=\\\"gatsby-code-text\\\">&lt;Suspense&gt;</code> where you want to see a loading indicator, but to use <code class=\\\"gatsby-code-text\\\">lazy()</code> wherever you want to do code splitting.</p>\\n<p>While this is not supported today, in the future we plan to let <code class=\\\"gatsby-code-text\\\">Suspense</code> handle more scenarios such as data fetching. You can read about this in <a href=\\\"/blog/2018/11/27/react-16-roadmap.html\\\">our roadmap</a>.</p>\\n<blockquote>\\n<p>Note:</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.lazy()</code> and <code class=\\\"gatsby-code-text\\\">&lt;React.Suspense&gt;</code> are not yet supported by <code class=\\\"gatsby-code-text\\\">ReactDOMServer</code>. This is a known limitation that will be resolved in the future.</p>\\n</blockquote>\",\"frontmatter\":{\"title\":\"React 顶层 API\",\"next\":null,\"prev\":null},\"fields\":{\"path\":\"docs/reference-react.md\",\"slug\":\"docs/react-api.html\"}}},\"pathContext\":{\"slug\":\"docs/react-api.html\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-react-api-html-e39c5cc91012cfbbb0bb.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p><code class=\\\"gatsby-code-text\\\">react</code> 是React库的入口点。如果你通过 <code class=\\\"gatsby-code-text\\\">&lt;script&gt;</code> 标签加载React，这些顶层API可用于 <code class=\\\"gatsby-code-text\\\">React</code> 全局。如果你使用ES6，你可以使用 <code class=\\\"gatsby-code-text\\\">import React from &#39;react&#39;</code>。如果你使用ES5，你可以使用 <code class=\\\"gatsby-code-text\\\">var React = require(&#39;react&#39;)</code> 。</p>\\n<h2 id=\\\"概览\\\"><a href=\\\"#%E6%A6%82%E8%A7%88\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>概览</h2>\\n<h3 id=\\\"components\\\"><a href=\\\"#components\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Components</h3>\\n<p>React 组件可以让你把UI分割为独立、可复用的片段，并将每一片段视为相互独立的部分。React组件可以通过继承 <code class=\\\"gatsby-code-text\\\">React.Component</code> 或 <code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 来定义。</p>\\n<ul>\\n<li><a href=\\\"#react.component\\\"><code class=\\\"gatsby-code-text\\\">React.Component</code></a></li>\\n<li><a href=\\\"#react.purecomponent\\\"><code class=\\\"gatsby-code-text\\\">React.PureComponent</code></a></li>\\n</ul>\\n<p>如果不用ES6类，你可以使用 <code class=\\\"gatsby-code-text\\\">create-react-class</code> 模块。参阅 <a href=\\\"/docs/react-without-es6.html\\\">Using React without JSX</a> 了解更多信息。</p>\\n<p>React components can also be defined as functions which can be wrapped:</p>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactmemo\\\"><code class=\\\"gatsby-code-text\\\">React.memo</code></a></li>\\n</ul>\\n<h3 id=\\\"creating-react-elements\\\"><a href=\\\"#creating-react-elements\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Creating React Elements</h3>\\n<p>推荐 <a href=\\\"/docs/introducing-jsx.html\\\">使用JSX</a> 描述你的UI外观。每个JSX元素仅是调用 <a href=\\\"#createelement\\\"><code class=\\\"gatsby-code-text\\\">React.createElement</code></a> 的语法糖。如果使用了JSX，你通常不会直接调用以下方法。</p>\\n<ul>\\n<li><a href=\\\"#createelement\\\"><code class=\\\"gatsby-code-text\\\">createElement()</code></a></li>\\n<li><a href=\\\"#createfactory\\\"><code class=\\\"gatsby-code-text\\\">createFactory()</code></a></li>\\n</ul>\\n<p>参阅 <a href=\\\"/docs/react-without-jsx.html\\\">Using React without JSX</a> 了解更多。</p>\\n<h3 id=\\\"transforming-elements\\\"><a href=\\\"#transforming-elements\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Transforming Elements</h3>\\n<p><code class=\\\"gatsby-code-text\\\">React</code> 提供了几个API用于操纵元素：</p>\\n<ul>\\n<li><a href=\\\"#cloneelement\\\"><code class=\\\"gatsby-code-text\\\">cloneElement()</code></a></li>\\n<li><a href=\\\"#isvalidelement\\\"><code class=\\\"gatsby-code-text\\\">isValidElement()</code></a></li>\\n<li><a href=\\\"#react.children\\\"><code class=\\\"gatsby-code-text\\\">React.Children</code></a></li>\\n</ul>\\n<h3 id=\\\"fragments\\\"><a href=\\\"#fragments\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Fragments</h3>\\n<p><code class=\\\"gatsby-code-text\\\">React</code> also provides a component for rendering multiple elements without a wrapper.</p>\\n<ul>\\n<li><a href=\\\"#reactfragment\\\"><code class=\\\"gatsby-code-text\\\">React.Fragment</code></a></li>\\n</ul>\\n<h3 id=\\\"refs\\\"><a href=\\\"#refs\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refs</h3>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactcreateref\\\"><code class=\\\"gatsby-code-text\\\">React.createRef</code></a></li>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactforwardref\\\"><code class=\\\"gatsby-code-text\\\">React.forwardRef</code></a></li>\\n</ul>\\n<h3 id=\\\"suspense\\\"><a href=\\\"#suspense\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Suspense</h3>\\n<p>Suspense lets components “wait” for something before rendering. Today, Suspense only supports one use case: <a href=\\\"https://reactjs.org/docs/code-splitting.html#reactlazy\\\">loading components dynamically with <code class=\\\"gatsby-code-text\\\">React.lazy</code></a>. In the future, it will support other use cases like data fetching.</p>\\n<ul>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactlazy\\\"><code class=\\\"gatsby-code-text\\\">React.lazy</code></a></li>\\n<li><a href=\\\"https://reactjs.org/docs/react-api.html#reactsuspense\\\"><code class=\\\"gatsby-code-text\\\">React.Suspense</code></a></li>\\n</ul>\\n<hr>\\n<h2 id=\\\"reference\\\"><a href=\\\"#reference\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Reference</h2>\\n<h3 id=\\\"reactcomponent\\\"><a href=\\\"#reactcomponent\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Component</code></h3>\\n<p>用 <a href=\\\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes\\\">ES6 类</a> 定义时，<code class=\\\"gatsby-code-text\\\">React.Component</code>是React组件的基类。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>有关基类 <code class=\\\"gatsby-code-text\\\">React.Component</code> 的方法和属性列表，请参阅 <a href=\\\"/docs/react-component.html\\\"><code class=\\\"gatsby-code-text\\\">React.Component API Reference</code></a>。</p>\\n<hr>\\n<h3 id=\\\"reactpurecomponent\\\"><a href=\\\"#reactpurecomponent\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.PureComponent</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 类似于 <a href=\\\"#react.component\\\"><code class=\\\"gatsby-code-text\\\">React.Component</code></a>。它们的不同之处在于<a href=\\\"https://reactjs.org/docs/react-api.html#reactcomponent\\\"><code class=\\\"gatsby-code-text\\\">React.Component</code></a> 没有实现 <a href=\\\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\\\"><code class=\\\"gatsby-code-text\\\">shouldComponentUpdate()</code></a>，但是 <code class=\\\"gatsby-code-text\\\">React.PureComponent</code>实现了它。采用对属性和状态用浅比较的方式。</p>\\n<p>如果React组件的 <code class=\\\"gatsby-code-text\\\">render()</code> 函数在给定相同的props和state下渲染为相同的结果，在某些场景下你可以使用 <code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 来提升性能。</p>\\n<blockquote>\\n<p>注意</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 的 <code class=\\\"gatsby-code-text\\\">shouldComponentUpdate()</code> 只会对对象进行浅对比。如果对象包含复杂的数据结构，它可能会因深层的数据不同而产生漏报判断。仅当你知道拥有的是简单的属性和状态时，才去继承 <code class=\\\"gatsby-code-text\\\">PureComponent</code>，或者在你知道深层的数据结构已经发生改变时使用 <a href=\\\"/docs/react-component.html#forceupdate\\\"><code class=\\\"gatsby-code-text\\\">forceUpate()</code></a>。或者，考虑使用 <a href=\\\"https://facebook.github.io/immutable-js/\\\">不可变对象</a> 来促进嵌套数据的快速比较。</p>\\n<p>此外,<code class=\\\"gatsby-code-text\\\">React.PureComponent</code> 的 <code class=\\\"gatsby-code-text\\\">shouldComponentUpdate()</code> 会略过为整个组件的子树更新属性。请确保所有的子级组件也是”纯”的。</p>\\n</blockquote>\\n<hr>\\n<h3 id=\\\"reactmemo\\\"><a href=\\\"#reactmemo\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.memo</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> MyComponent <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">memo</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyComponent</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* render using props */</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">React.memo</code> is a <a href=\\\"https://reactjs.org/docs/higher-order-components.html\\\">higher order component</a>. It’s similar to <a href=\\\"https://reactjs.org/docs/react-api.html#reactpurecomponent\\\"><code class=\\\"gatsby-code-text\\\">React.PureComponent</code></a> but for function components instead of classes.</p>\\n<p>If your function component renders the same result given the same props, you can wrap it in a call to <code class=\\\"gatsby-code-text\\\">React.memo</code> for a performance boost in some cases by memoizing the result. This means that React will skip rendering the component, and reuse the last rendered result.</p>\\n<p>By default it will only shallowly compare complex objects in the props object. If you want control over the comparison, you can also provide a custom comparison function as the second argument.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyComponent</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/* render using props */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">areEqual</span><span class=\\\"token punctuation\\\">(</span>prevProps<span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">/*\\n  return true if passing nextProps to render would return\\n  the same result as passing prevProps to render,\\n  otherwise return false\\n  */</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">memo</span><span class=\\\"token punctuation\\\">(</span>MyComponent<span class=\\\"token punctuation\\\">,</span> areEqual<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>This method only exists as a <strong>performance optimization.</strong> Do not rely on it to “prevent” a render, as this can lead to bugs.</p>\\n<blockquote>\\n<p>Note</p>\\n<p>Unlike the <a href=\\\"https://reactjs.org/docs/react-component.html#shouldcomponentupdate\\\"><code class=\\\"gatsby-code-text\\\">shouldComponentUpdate()</code></a> method on class components, the <code class=\\\"gatsby-code-text\\\">areEqual</code> function returns <code class=\\\"gatsby-code-text\\\">true</code> if the props are equal and <code class=\\\"gatsby-code-text\\\">false</code> if the props are not equal. This is the inverse from <code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>.</p>\\n</blockquote>\\n<hr>\\n<h3 id=\\\"createelement\\\"><a href=\\\"#createelement\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">createElement()</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createElement</span><span class=\\\"token punctuation\\\">(</span>\\n  type<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>props<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>创建并返回给定类型的新 <a href=\\\"/docs/rendering-elements.html\\\"><code class=\\\"gatsby-code-text\\\">React element</code></a> 。参数type既可以是一个标签名称字符串(例如<code class=\\\"gatsby-code-text\\\">&#39;div&#39;</code> 或 <code class=\\\"gatsby-code-text\\\">&#39;span&#39;</code> )，也可以是一个 <a href=\\\"/docs/components-and-props.html\\\"><code class=\\\"gatsby-code-text\\\">React component</code></a> 类型(一个类或一个函数)，或者一个<a href=\\\"https://reactjs.org/docs/react-api.html#reactfragment\\\">React fragment</a> 类型。</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.DOM</code> 提供了DOM组件的 <code class=\\\"gatsby-code-text\\\">React.createElement()</code> 的便捷包装。举个例子，<code class=\\\"gatsby-code-text\\\">React.DOM.a(...)</code> 是 <code class=\\\"gatsby-code-text\\\">React.createELement(&#39;a&#39;, ...)</code> 的一个便捷包装。这个用法被认为是过时的，我们推荐您使用JSX，或者直接使用 <code class=\\\"gatsby-code-text\\\">React.createElement()</code> 。</p>\\n<p>用 <a href=\\\"/docs/introducing-jsx.html\\\"><code class=\\\"gatsby-code-text\\\">JSX</code></a> 编写的代码会被转换成用 <code class=\\\"gatsby-code-text\\\">React.createElement()</code> 实现。如果使用了JSX，你通常不会直接调用 <code class=\\\"gatsby-code-text\\\">React.createElement()</code>。参阅 <a href=\\\"/docs/react-without-jsx.html\\\"><code class=\\\"gatsby-code-text\\\">React Without JSX</code></a> 了解更多。</p>\\n<hr>\\n<h3 id=\\\"cloneelement\\\"><a href=\\\"#cloneelement\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">cloneElement()</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">cloneElement</span><span class=\\\"token punctuation\\\">(</span>\\n  element<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span>props<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">[</span><span class=\\\"token operator\\\">...</span>children<span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>克隆并返回一个新的React元素(React Element)，使用 <code class=\\\"gatsby-code-text\\\">element</code> 作为起点。生成的元素将会拥有原始元素props与新props的浅合并。新的子级会替换现有的子级。来自原始元素的 <code class=\\\"gatsby-code-text\\\">key</code> 和 <code class=\\\"gatsby-code-text\\\">ref</code> 将会保留。</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.cloneElement()</code> 几乎相当于：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>element.type</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">element</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span><span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>element.type</span><span class=\\\"token punctuation\\\">></span></span>\\n</code></pre>\\n      </div>\\n<p>然而，它也保留了全部的 <code class=\\\"gatsby-code-text\\\">ref</code>。这意味着，如果你通过 <code class=\\\"gatsby-code-text\\\">ref</code> 获取到孩子时，不会偶然从祖先组件里窃取了它。你将获得同一个<code class=\\\"gatsby-code-text\\\">ref</code>附着到你的新元素。</p>\\n<p>引入这个API用来替换已弃用的 <code class=\\\"gatsby-code-text\\\">React.addons.cloneWithProps()</code>。</p>\\n<hr>\\n<h3 id=\\\"createfactory\\\"><a href=\\\"#createfactory\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">createFactory()</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createFactory</span><span class=\\\"token punctuation\\\">(</span>type<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>返回一个函数，此函数创建给定类型的React元素。类似 <a href=\\\"#createElement\\\"><code class=\\\"gatsby-code-text\\\">React.createElement</code></a>，类型参数既可以是一个标签名称字符串(such as <code class=\\\"gatsby-code-text\\\">&#39;div&#39;</code> or <code class=\\\"gatsby-code-text\\\">&#39;span&#39;</code>)，也可以是一个 <a href=\\\"/docs/components-and-props.html\\\"><code class=\\\"gatsby-code-text\\\">React component</code></a> 类型(一个类或一个函数)，或者一个<a href=\\\"https://reactjs.org/docs/react-api.html#reactfragment\\\">React fragment</a>类型。</p>\\n<p>这个方法被认为是遗留的，我们鼓励你使用JSX或直接使用 <code class=\\\"gatsby-code-text\\\">React.createElement()</code> 来替代它。</p>\\n<p>如果使用了JSX，你通常不会直接调用<code class=\\\"gatsby-code-text\\\">React.createFactory()</code> 。参阅 <a href=\\\"/docs/react-without-jsx.html\\\"><code class=\\\"gatsby-code-text\\\">React Without JSX</code></a>了解更多 。</p>\\n<hr>\\n<h3 id=\\\"isvalidelement\\\"><a href=\\\"#isvalidelement\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">isValidElement()</code></h3>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">isValidElement</span><span class=\\\"token punctuation\\\">(</span>object<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>验证对象是否是一个React元素。返回 <code class=\\\"gatsby-code-text\\\">true</code> 或 <code class=\\\"gatsby-code-text\\\">false</code> 。</p>\\n<hr>\\n<h3 id=\\\"reactchildren\\\"><a href=\\\"#reactchildren\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.Children</code> 提供了处理 <code class=\\\"gatsby-code-text\\\">this.props.children</code> 这个不透明数据结构的工具。</p>\\n<h4 id=\\\"reactchildrenmap\\\"><a href=\\\"#reactchildrenmap\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.map</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>在包含在 <code class=\\\"gatsby-code-text\\\">children</code> 里的每个直接孩子上调用一个函数，并且<code class=\\\"gatsby-code-text\\\">this</code> 设置为 <code class=\\\"gatsby-code-text\\\">thisArg</code> 。如果 <code class=\\\"gatsby-code-text\\\">children</code> 是一个数组它将被遍历，函数将被调用为每个数组中的孩子。如果 <code class=\\\"gatsby-code-text\\\">children</code> 是 <code class=\\\"gatsby-code-text\\\">null</code> 或 <code class=\\\"gatsby-code-text\\\">undefined</code> ，这个方法将返回 <code class=\\\"gatsby-code-text\\\">null</code> 或 <code class=\\\"gatsby-code-text\\\">undefined</code> 而不是一个数组。</p>\\n<blockquote>\\n<p>注意</p>\\n<p>如果 <code class=\\\"gatsby-code-text\\\">children</code> 是一个 <code class=\\\"gatsby-code-text\\\">Fragment</code>，它将被当作单独一个孩子，不会被遍历。</p>\\n</blockquote>\\n<h4 id=\\\"reactchildrenforeach\\\"><a href=\\\"#reactchildrenforeach\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.forEach</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forEach</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token punctuation\\\">(</span>thisArg<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>类似 <a href=\\\"#react.children.map\\\"><code class=\\\"gatsby-code-text\\\">React.Children.map()</code></a> ，但是不返回数组。</p>\\n<h4 id=\\\"reactchildrencount\\\"><a href=\\\"#reactchildrencount\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.count</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">count</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>返回 <code class=\\\"gatsby-code-text\\\">children</code> 中的组件总数，等于传给 <code class=\\\"gatsby-code-text\\\">map</code> 或 <code class=\\\"gatsby-code-text\\\">forEach</code> 的回调函数被调用的次数。</p>\\n<h4 id=\\\"reactchildrenonly\\\"><a href=\\\"#reactchildrenonly\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.only</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">only</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>验证<code class=\\\"gatsby-code-text\\\">children</code>只有唯一一个孩子（React元素）并返回它。否则这个方法扔抛出一个错误。</p>\\n<blockquote>\\n<p>注意</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.Children.only()</code> 不接受 the return value of <a href=\\\"https://reactjs.org/docs/react-api.html#reactchildrenmap\\\"><code class=\\\"gatsby-code-text\\\">React.Children.map()</code></a> 因为它是一个数组而不是一个React元素。</p>\\n</blockquote>\\n<h4 id=\\\"reactchildrentoarray\\\"><a href=\\\"#reactchildrentoarray\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Children.toArray</code></h4>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\">React<span class=\\\"token punctuation\\\">.</span>Children<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">toArray</span><span class=\\\"token punctuation\\\">(</span>children<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>返回<code class=\\\"gatsby-code-text\\\">children</code> 不透明的数据结构作为一个扁平数组，并将键赋给每个孩子。一个用途是当你打算在渲染方法里操纵子代集合时，特别是你想在 <code class=\\\"gatsby-code-text\\\">this.props.children</code> 传下它之前对它重新排序或切片。</p>\\n<blockquote>\\n<p>注意</p>\\n<p>当扁平化子代列表时，<code class=\\\"gatsby-code-text\\\">React.Children.toArray()</code> 改变key来保留嵌套数组的语义。也就是说，<code class=\\\"gatsby-code-text\\\">toArray</code> 会给被返回的数组中的每个键加上前缀。这样每个元素的键会应用作用域到它的输入数组。</p>\\n</blockquote>\\n<hr>\\n<h3 id=\\\"reactfragment\\\"><a href=\\\"#reactfragment\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Fragment</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.Fragment</code> 组件让你在一个<code class=\\\"gatsby-code-text\\\">render()</code> 方法中返回多个元素，而不用创造一个额外的 DOM 元素：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>React.Fragment</span><span class=\\\"token punctuation\\\">></span></span>\\n      Some text<span class=\\\"token punctuation\\\">.</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h2</span><span class=\\\"token punctuation\\\">></span></span>A heading<span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h2</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>React.Fragment</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>You can also use it with the shorthand <code class=\\\"gatsby-code-text\\\">&lt;&gt;&lt;/&gt;</code> syntax. For more information, see <a href=\\\"/blog/2017/11/28/react-v16.2.0-fragment-support.html\\\">React v16.2.0: Improved Support for Fragments</a>.</p>\\n<h3 id=\\\"reactcreateref\\\"><a href=\\\"#reactcreateref\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.createRef</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.createRef</code> creates a <a href=\\\"/docs/refs-and-the-dom.html\\\">ref</a> that can be attached to React elements via the ref attribute.\\n<div class=\\\"gatsby-highlight\\\">\\n        <pre class=\\\"gatsby-code-jsx\\\"><code><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>inputRef <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createRef</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>input</span> <span class=\\\"token attr-name\\\">type</span><span class=\\\"token attr-value\\\"><span class=\\\"token punctuation\\\">=</span><span class=\\\"token punctuation\\\">\\\"</span>text<span class=\\\"token punctuation\\\">\\\"</span></span> <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>inputRef<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>inputRef<span class=\\\"token punctuation\\\">.</span>current<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">focus</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span>  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n        </div></p>\\n<h3 id=\\\"reactforwardref\\\"><a href=\\\"#reactforwardref\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.forwardRef</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.forwardRef</code> creates a React component that forwards the <a href=\\\"/docs/refs-and-the-dom.html\\\">ref</a> attribute it receives to another component below in the tree. This technique is not very common but is particularly useful in two scenarios:</p>\\n<ul>\\n<li><a href=\\\"/docs/forwarding-refs.html#forwarding-refs-to-dom-components\\\">Forwarding refs to DOM components</a></li>\\n<li><a href=\\\"/docs/forwarding-refs.html#forwarding-refs-in-higher-order-components\\\">Forwarding refs in higher-order-components</a></li>\\n</ul>\\n<p><code class=\\\"gatsby-code-text\\\">React.forwardRef</code> accepts a rendering function as an argument. React will call this function with <code class=\\\"gatsby-code-text\\\">props</code> and <code class=\\\"gatsby-code-text\\\">ref</code> as two arguments. This function should return a React node.</p>\\n<p><div class=\\\"gatsby-highlight\\\">\\n        <pre class=\\\"gatsby-code-jsx\\\"><code><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>Component<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Enhanced</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// ...</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span>forwardedRef<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>rest<span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\n      <span class=\\\"token comment\\\">// Assign the custom prop \\\"forwardedRef\\\" as a ref</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Component</span> <span class=\\\"token attr-name\\\">ref</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>forwardedRef<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">rest</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token comment\\\">// Intercept the \\\"ref\\\" and pass it as a custom prop, e.g. \\\"forwardedRef\\\"</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">enhanceForwardRef</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> ref<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Enhanced</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">forwardedRef</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>ref<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token punctuation\\\">}</span>\\n</span>\\n  <span class=\\\"token comment\\\">// These next lines are not necessary,</span>\\n  <span class=\\\"token comment\\\">// But they do give the component a better display name in DevTools,</span>\\n  <span class=\\\"token comment\\\">// e.g. \\\"ForwardRef(withTheme(MyComponent))\\\"</span>\\n  <span class=\\\"token keyword\\\">const</span> name <span class=\\\"token operator\\\">=</span> Component<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> Component<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">;</span>\\n  enhanceForwardRef<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`enhance(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span>name<span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"gatsby-highlight-code-line\\\">  <span class=\\\"token keyword\\\">return</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">forwardRef</span><span class=\\\"token punctuation\\\">(</span>enhanceForwardRef<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</span><span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n        </div></p>\\n<p>In the above example, React passes a <code class=\\\"gatsby-code-text\\\">ref</code> given to <code class=\\\"gatsby-code-text\\\">&lt;FancyButton ref={ref}&gt;</code> element as a second argument to the rendering function inside the <code class=\\\"gatsby-code-text\\\">React.forwardRef</code> call. This rendering function passes the <code class=\\\"gatsby-code-text\\\">ref</code> to the <code class=\\\"gatsby-code-text\\\">&lt;button ref={ref}&gt;</code> element.</p>\\n<p>As a result, after React attaches the ref, <code class=\\\"gatsby-code-text\\\">ref.current</code> will point directly to the <code class=\\\"gatsby-code-text\\\">&lt;button&gt;</code> DOM element instance.</p>\\n<p>For more information, see <a href=\\\"/docs/forwarding-refs.html\\\">forwarding refs</a>.</p>\\n<h3 id=\\\"reactlazy\\\"><a href=\\\"#reactlazy\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.lazy</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.lazy()</code> lets you define a component that is loaded dynamically. This helps reduce the bundle size to delay loading components that aren’t used during the initial render.</p>\\n<p>You can learn how to use it from our <a href=\\\"/docs/code-splitting.html#reactlazy\\\">code splitting documentation</a>. You might also want to check out <a href=\\\"https://medium.com/@pomber/lazy-loading-and-preloading-components-in-react-16-6-804de091c82d\\\">this article</a> explaining how to use it in more detail.</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// This component is loaded dynamically</span>\\n<span class=\\\"token keyword\\\">const</span> SomeComponent <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./SomeComponent'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>Note that rendering <code class=\\\"gatsby-code-text\\\">lazy</code> components requires that there’s a <code class=\\\"gatsby-code-text\\\">&lt;React.Suspense&gt;</code> component higher in the rendering tree. This is how you specify a loading indicator.</p>\\n<blockquote>\\n<p><strong>Note</strong></p>\\n<p>Using <code class=\\\"gatsby-code-text\\\">React.lazy</code>with dynamic import requires Promises to be available in the JS environment. This requires a polyfill on IE11 and below.</p>\\n</blockquote>\\n<h3 id=\\\"reactsuspense\\\"><a href=\\\"#reactsuspense\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a><code class=\\\"gatsby-code-text\\\">React.Suspense</code></h3>\\n<p><code class=\\\"gatsby-code-text\\\">React.Suspense</code> let you specify the loading indicator in case some components in the tree below it are not yet ready to render. Today, lazy loading components is the <strong>only</strong> use case supported by <code class=\\\"gatsby-code-text\\\">&lt;React.Suspense&gt;</code>:</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// This component is loaded dynamically</span>\\n<span class=\\\"token keyword\\\">const</span> OtherComponent <span class=\\\"token operator\\\">=</span> React<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">lazy</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token keyword\\\">import</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'./OtherComponent'</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">MyComponent</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token comment\\\">// Displays &lt;Spinner> until OtherComponent loads</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>React.Suspense</span> <span class=\\\"token attr-name\\\">fallback</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Spinner</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">}</span></span><span class=\\\"token punctuation\\\">></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>OtherComponent</span> <span class=\\\"token punctuation\\\">/></span></span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>React.Suspense</span><span class=\\\"token punctuation\\\">></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>It is documented in our <a href=\\\"/docs/code-splitting.html#reactlazy\\\">code splitting guide</a>. Note that <code class=\\\"gatsby-code-text\\\">lazy</code> components can be deep inside the <code class=\\\"gatsby-code-text\\\">Suspense</code> tree — it doesn’t have to wrap every one of them. The best practice is to place <code class=\\\"gatsby-code-text\\\">&lt;Suspense&gt;</code> where you want to see a loading indicator, but to use <code class=\\\"gatsby-code-text\\\">lazy()</code> wherever you want to do code splitting.</p>\\n<p>While this is not supported today, in the future we plan to let <code class=\\\"gatsby-code-text\\\">Suspense</code> handle more scenarios such as data fetching. You can read about this in <a href=\\\"/blog/2018/11/27/react-16-roadmap.html\\\">our roadmap</a>.</p>\\n<blockquote>\\n<p>Note:</p>\\n<p><code class=\\\"gatsby-code-text\\\">React.lazy()</code> and <code class=\\\"gatsby-code-text\\\">&lt;React.Suspense&gt;</code> are not yet supported by <code class=\\\"gatsby-code-text\\\">ReactDOMServer</code>. This is a known limitation that will be resolved in the future.</p>\\n</blockquote>\",\"frontmatter\":{\"title\":\"React 顶层 API\",\"next\":null,\"prev\":null},\"fields\":{\"path\":\"docs/reference-react.md\",\"slug\":\"docs/react-api.html\"}}},\"pathContext\":{\"slug\":\"docs/react-api.html\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-react-api-html.json\n// module id = 920\n// module chunks = 93598318429237"],"sourceRoot":""}