webpackJsonp([0x8eb0e04ff0fb],{825:function(n,s){n.exports={data:{markdownRemark:{html:'<p>React 16.4  <a href="/blog/2018/05/23/react-v-16-4.html#bugfix-for-getderivedstatefromprops">修复了一个关于 getDerivedStateFromProps 的 bug</a>。若这篇文章提及了你应用中正在使用的反模式，并在修复后导致了无法正确工作，我们对此感到抱歉。在这篇文章，我们将对在派生状态下普遍使用的反模式以及我们倾向的选择方案进行说明。</p>\n<p>在很长的一段时间，生命周期 <code class="gatsby-code-text">componentWillReceiveProps</code> 是唯一的能够在 props 变更时更新状态而不触发渲染的唯一方式。在 16.3，<a href="https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes">我们引入了一个替代的生命周期，<code class="gatsby-code-text">getDerivedStateFromProps</code></a> 用以更安全的方式来解决同样的问题。同时，我们意识到有些用户可能会对如何使用这两个方法有很多误解，我们也发现了一些反模式会导致潜在的令人困惑的 bug。在 16.4 中修复的 <code class="gatsby-code-text">getDerivedStateFromProps</code> <a href="https://github.com/facebook/react/issues/12898">使得派生状态会更容易预测</a>，因此一些错误的用例会更容易注意到。</p>\n<blockquote>\n<p>注意</p>\n<p>本文所提及的反模式同时应用了 <code class="gatsby-code-text">componentWillReceivedProps</code> 和 <code class="gatsby-code-text">getDerivedStateFromProps</code> 两个方法。</p>\n</blockquote>\n<p>本文将涵盖以下主题：</p>\n<ul>\n<li><a href="#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B4%BE%E7%94%9F%E7%8A%B6%E6%80%81">何时使用派生状态</a></li>\n<li>\n<p><a href="#%E4%BD%BF%E7%94%A8%E6%B4%BE%E7%94%9F%E7%8A%B6%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98">使用派生状态的一些常见问题</a></p>\n<ul>\n<li>[反模式：无条件地将 props 拷贝到状态上](#反模式：无条件地将 props 拷贝到状态上)</li>\n<li>[反模式：当 props 更新时擦除状态](#反模式：当 props 更新时擦除状态)</li>\n</ul>\n</li>\n<li><a href="#%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88">更好的解决方案</a></li>\n<li><a href="#%E8%AE%B0%E5%BF%86%E5%8C%96%EF%BC%88memoization%EF%BC%89%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A1%8C%EF%BC%9F">记忆化（memoization）是否可行？</a></li>\n</ul>\n<h2 id="何时使用派生状态"><a href="#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8%E6%B4%BE%E7%94%9F%E7%8A%B6%E6%80%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>何时使用派生状态</h2>\n<p><code class="gatsby-code-text">getDerivedStateFromeProps</code> 存在仅有一个目的。其能够让组件在 <strong>prop 变更时</strong> 更新内部的状态。我们之前的博文提供了一些例子，例如<a href="/blog/2018/03/27/update-on-async-rendering.html#updating-state-based-on-props">基于当前变更的偏移（offset）prop 记录当前的滚动方向</a> 或者 <a href="/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data-when-props-change">通过资源 prop 加载额外的特定资源</a>。 </p>\n<p>我们没有提供更多的例子，因为作为一个通用规则，<strong>派生状态应谨慎使用</strong>。我们所见过的所有的由派生状态导致的问题最终都可归结为（1）无条件的通过 props 来更新状态或（2）无论 props 是否和 状态匹配都更新状态。（我们将在接下来更为细致地探讨这两个问题。）</p>\n<ul>\n<li>若你仅通过当前的 props 使用派生状态来缓存一些计算操作，则没必要使用派生状态。可查看 <a href="#what-about-memoization">记忆化是否可行？</a>一节。</li>\n<li>若你只是无条件的更新派生状态或无论 props 和状态是否匹配都进行更新，你的组件可能太过于频繁的重置它的内部状态。继续阅读了解更多细节。</li>\n</ul>\n<h2 id="使用派生状态的一些常见问题"><a href="#%E4%BD%BF%E7%94%A8%E6%B4%BE%E7%94%9F%E7%8A%B6%E6%80%81%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>使用派生状态的一些常见问题</h2>\n<p>术语 <a href="/docs/forms.html#controlled-components">“受控”</a> 和 <a href="/docs/uncontrolled-components.html">“非受控”</a> 通常指的是表单的输入框，但它们也可用于描述组件的数据的生命周期。作为 props 传递组件可以认为是 <strong>受控</strong>的（因为父组件<em>控制</em>那ß些数据）。仅存在于内部状态的数据则可以认为是<strong>非受控的</strong>（因为父组件无法直接改变它）。</p>\n<p>派生组件最常见的错误是混淆了这两者；当一个派生状态的值也能通过 <code class="gatsby-code-text">setState</code> 调用来更新时，之前在<a href="/blog/2018/03/27/update-on-async-rendering.html#fetching-external-data-when-props-change">额外的数据加载例子</a>可能听起来有些类似，但在一些重要的方式上存在着差异。在加载的例子中，对于 “source” prop 和 “loading” 状态都有一个清晰的来源。当 source prop 发生改变，loading 状态则应当<strong>永远</strong>被重写。反过来，仅当 prop <strong>发生改变</strong>并且由组件管理时，状态才会被重写。</p>\n<p>当这些约束的任何一条被改变都会引发问题。典型的情况是在两个表单下。让我们来看个例子。</p>\n<h3 id="反模式：无条件地将-props-拷贝到状态上"><a href="#%E5%8F%8D%E6%A8%A1%E5%BC%8F%EF%BC%9A%E6%97%A0%E6%9D%A1%E4%BB%B6%E5%9C%B0%E5%B0%86-props-%E6%8B%B7%E8%B4%9D%E5%88%B0%E7%8A%B6%E6%80%81%E4%B8%8A" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>反模式：无条件地将 props 拷贝到状态上</h3>\n<p>一个普遍的误解是 <code class="gatsby-code-text">getDerivedStateFromProps</code> 和 <code class="gatsby-code-text">componentWillReceiveProps</code> 仅在 props 改变时被调用。这些生命周期会在父组件重新渲染时被调用，无论其 props 是否和之前有不同。由于这一原因，总是<em>无条件</em>地使用这些生命周期重载状态是不安全的。<strong>这么做可能会导致更新状态的丢失。</strong></p>\n<p>考虑一个描述了这一问题的例子。有一个将 email prop 复制到状态的 <code class="gatsby-code-text">EmailInput</code> 的组件：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>email <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This will erase any local state updates!</span>\n    <span class="token comment">// Do not do this.</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> nextProps<span class="token punctuation">.</span>email <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>首先，该组件看起来没问题。状态通过特定的 prop 进行初始化并当我们在 <code class="gatsby-code-text">&lt;input&gt;</code> 中输入时进行更新。但如果我们组件的父元素重渲，任何我们在 <code class="gatsby-code-text">&lt;input&gt;</code> 中的输入都将丢失！（<a href="https://codesandbox.io/s/m3w9zn1z8x">查看这一例子。</a>）即使我们在重置前对 <code class="gatsby-code-text">nextProps.email !== this.state.email</code> 进行比较，仍返回真。</p>\n<p>在这一例子中，增加 <code class="gatsby-code-text">shouldComponentUpdate</code> 方法保证当且仅当 email prop 发生变更时才进行重渲可能能修复该问题。然而在实践中，组件通常可以接受多个 props；另一个 prop 的变更仍会导致重渲并进行错误的重置。函数和对象类型的 props 常通过内联的形式创建，使得其很难实现一个可靠的 <code class="gatsby-code-text">shouldComponentUpdate</code> 保证当且仅当元素变更时才返回真值。<a href="https://codesandbox.io/s/jl0w6r9w59">这一例子描述了具体的内容。</a>最终，<code class="gatsby-code-text">shouldComponentUpdate</code> 最好用于性能优化，而不是保证派生状态的正确性。</p>\n<p>希望现在对于为何<strong>无条件地将 prop 复制到状态是个糟糕的理念</strong>已经解释清楚了。在回顾可行的解决方案前，先来看一个相关的问题模式：要是我们仅在 email prop 发生变更时才更新如何？</p>\n<h3 id="反模式：当-props-更新时擦除状态"><a href="#%E5%8F%8D%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%BD%93-props-%E6%9B%B4%E6%96%B0%E6%97%B6%E6%93%A6%E9%99%A4%E7%8A%B6%E6%80%81" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>反模式：当 props 更新时擦除状态</h3>\n<p>继续之前的例子，我们可以仅当 <code class="gatsby-code-text">props.email</code> 变更时进行更新来避免意外的擦除状态：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>email\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">componentWillReceiveProps</span><span class="token punctuation">(</span>nextProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Any time props.email changes, update state.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>nextProps<span class="token punctuation">.</span>email <span class="token operator">!==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>email<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        email<span class="token punctuation">:</span> nextProps<span class="token punctuation">.</span>email\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  \n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<blockquote>\n<p>注意</p>\n<p>即使之前的例子展示了 <code class="gatsby-code-text">componentWillReceiveProps</code>，其和使用 <code class="gatsby-code-text">getDerivedStateFromProps</code> 一样是反模式。</p>\n</blockquote>\n<p>我们做了一个巨大的提升。现在我们的组件仅当 props 真的改变时才会擦除我们的输入。</p>\n<p>这仍然存在一个潜在的问题。想象一个使用了之前输入框组件的密码管理应用。当定位到了使用相同邮箱的两个账户，输入框将无法进行重设。这是由于两个账户传递给组件的值都是相同的！这可能会让用户感到诧异，由于碰巧使用了相同的邮箱，对于一个账户的不安全变更的出现会影响到其他账户。（<a href="https://codesandbox.io/s/mz2lnkjkrx">点击查看案例。</a>）</p>\n<p>这一设计存在潜在的缺陷，但却很容易犯。（<a href="https://twitter.com/brian_d_vaughn/status/959600888242307072">我自己也曾出错过！</a>）幸运的是有两种替代方案效果更好。二者的关键在于 <strong>对于数据的任何部分，你需要保证其是一个组件唯一数据源，并避免将其复制给其他组件。</strong>现在来看一下每种替代的方案。</p>\n<h2 id="更好的解决方案"><a href="#%E6%9B%B4%E5%A5%BD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>更好的解决方案</h2>\n<h3 id="推荐方案：完全受控组件"><a href="#%E6%8E%A8%E8%8D%90%E6%96%B9%E6%A1%88%EF%BC%9A%E5%AE%8C%E5%85%A8%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>推荐方案：完全受控组件</h3>\n<p>一种可以避免之前提到的问题的方式是将状态从我们的组件中完全移除。如果邮箱地址仅作为 prop 存在，而后我们就不需要担心和状态产生冲突的问题。我们甚至可以将 <code class="gatsby-code-text">EmailInput</code> 变为一个轻量的函数组件：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">function</span> <span class="token function">EmailInput</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>onChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>props<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>这一方法简化了我们的组件实现，但如果仍想要保存一个临时的值，现在需要父组件去手动进行调整。（<a href="https://codesandbox.io/s/7154w1l551">点击查看这一模式示例。</a>）</p>\n<h3 id="推荐方案：带-key-的完全不受控组件"><a href="#%E6%8E%A8%E8%8D%90%E6%96%B9%E6%A1%88%EF%BC%9A%E5%B8%A6-key-%E7%9A%84%E5%AE%8C%E5%85%A8%E4%B8%8D%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>推荐方案：带 <code class="gatsby-code-text">key</code> 的完全不受控组件</h3>\n<p>另一个对于我们组件来说可行的替代方案是完全由我们的组件来“定义” email 状态。在这一情况下，我们的组件仍接受一个 prop 作为<em>初始</em>值，但其会忽略该 prop 可能的变更：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>defaultEmail <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>为了保证当传入一个不同的内容时能重设该值（类似我们的密码管理器的场景），我们可以使用一个被称为 <code class="gatsby-code-text">key</code> 的特殊的 React 特性。当一个 <code class="gatsby-code-text">key</code> 变更时，React 将 <a href="/docs/reconciliation.html#keys"><em>创建</em>一个新的组件实例而不是更新当前组件</a>。Keys 通常被用于动态列表但也适用于这里的场景。在我们的案例中，我们可以在任意时间上当新用户被选定时使用用户的 ID 重建邮件输入框：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>EmailInput</span>\n  <span class="token attr-name">defaultEmail</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>email<span class="token punctuation">}</span></span>\n  <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>user<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span>\n<span class="token punctuation">/></span></span>\n</code></pre>\n      </div>\n<p>每次 ID 的变更，<code class="gatsby-code-text">EmailInput</code> 都会重新创建且它的内部状态将会被重设为最新的 <code class="gatsby-code-text">defaultEmail</code> 值。（<a href="https://codesandbox.io/s/6v1znlxyxn">点击查看这一模式。</a>）通过这一方式，你不必给每个输入框添加一个 <code class="gatsby-code-text">key</code>。而给整个表单设置一个 <code class="gatsby-code-text">key</code> 似乎更有意义。每次 key 变更时，所有表单的内部组件将会重建并带有一个最新的初始值。</p>\n<p>在大多数场景下，这是最好的处理状态需要变更的方式。</p>\n<blockquote>\n<p>注意</p>\n<p>这一方是听上去可能比较慢，但性能上并没有明显的差异。如果该组件包含了繁重的逻辑如通过对比传递给子树的 prop 来进行更新等， 使用 key 甚至会更快。</p>\n</blockquote>\n<h4 id="替代方案-1：通过-id-prop-重置非受控组件"><a href="#%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88-1%EF%BC%9A%E9%80%9A%E8%BF%87-id-prop-%E9%87%8D%E7%BD%AE%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>替代方案 1：通过 ID prop 重置非受控组件</h4>\n<p>若 <code class="gatsby-code-text">key</code> 在某些情况下不生效（可能是乳尖在初始化时非常耗时），一个可行但非常笨重的解决方案是在 <code class="gatsby-code-text">getDerivedStateFromeProps</code> 方法里监听 “userID” 的变更：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>defaultEmail<span class="token punctuation">,</span>\n    prevPropsUserID<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>userID\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Any time the current user changes,</span>\n    <span class="token comment">// Reset any parts of state that are tied to that user.</span>\n    <span class="token comment">// In this simple example, that\'s just the email.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>props<span class="token punctuation">.</span>userID <span class="token operator">!==</span> state<span class="token punctuation">.</span>prevPropsUserID<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        prevPropsUserID<span class="token punctuation">:</span> props<span class="token punctuation">.</span>userID<span class="token punctuation">,</span>\n        email<span class="token punctuation">:</span> props<span class="token punctuation">.</span>defaultEmail\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>如果我们选择了这一方式，其也提供了一种灵活的方式来仅重置我们组件内部的部分状态。（<a href="https://codesandbox.io/s/rjyvp7l3rq">点击查看这一模式。</a>）</p>\n<blockquote>\n<p>Note</p>\n<p>Even though the example above shows <code class="gatsby-code-text">getDerivedStateFromProps</code>, the same technique can be used with <code class="gatsby-code-text">componentWillReceiveProps</code>.</p>\n</blockquote>\n<blockquote>\n<p>注意</p>\n<p>即使之前的例子使用了 <code class="gatsby-code-text">getDerivedStateFromProps</code>，其同样也可以使用 <code class="gatsby-code-text">componentWillReceiveProps</code>。</p>\n</blockquote>\n<h4 id="替代方案-2：通过实例方法重置非受控组件"><a href="#%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88-2%EF%BC%9A%E9%80%9A%E8%BF%87%E5%AE%9E%E4%BE%8B%E6%96%B9%E6%B3%95%E9%87%8D%E7%BD%AE%E9%9D%9E%E5%8F%97%E6%8E%A7%E7%BB%84%E4%BB%B6" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>替代方案 2：通过实例方法重置非受控组件</h4>\n<p>更少见的是，即使没有合适的 ID 作为 <code class="gatsby-code-text">key</code>，你也需要重置状态。一种解决方案是重设 key 为一个随机值或每次设置一个你期望的自增的数字。另一种可行的替代方案是暴露一个实例方法来强制重置内部状态：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">EmailInput</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    email<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>defaultEmail\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">resetEmailForNewUser</span><span class="token punctuation">(</span>newEmail<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> email<span class="token punctuation">:</span> newEmail <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>父表单组件而后可以通过<a href="/docs/glossary.html#refs">使用 <code class="gatsby-code-text">ref</code> 来调用这一方法</a>。(<a href="https://codesandbox.io/s/l70krvpykl">点击查看这一例子。</a>)</p>\n<p>Ref 在特定的情况下非常有用，如这一场景，但通常我们推荐你尽量不要使用。甚至在这一情况，这一强制的方法并不理想，因为会引发两次渲染而不是一次。</p>\n<hr>\n<h3 id="总结"><a href="#%E6%80%BB%E7%BB%93" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>总结</h3>\n<p>作为概括，当在设计一个组件时，决定其数据是受控还是非受控非常关键。</p>\n<p>让组件变得<strong>可控</strong>，以及在父组件中将两个不同的值进行合并，而不是仅仅尝试将<strong>prop 的值“复制”到状态中</strong>。例如，与其让子组件接受一个“提交”的 <code class="gatsby-code-text">props.value</code> 并追踪“变更(draft)”的 <code class="gatsby-code-text">state.value</code>，不如让父组件同时管理 <code class="gatsby-code-text">state.draftValue</code> 和 <code class="gatsby-code-text">state.committedValue</code> 并直接控制子组件的值。这让数据流更为直接和可预测。</p>\n<p>对于<strong>非受控</strong>组件，如果你尝试当一个特殊的 prop（通常是 ID） 改变时重置状态，通常有以下一些选择：</p>\n<ul>\n<li><strong>建议：使用 <code class="gatsby-code-text">key</code> 属性来重置<em>所有内部状态</em>。</strong></li>\n<li>方案1：监听一些特殊属性的变更（如：<code class="gatsby-code-text">props.userID</code>），重置<em>特定的状态</em>。</li>\n<li>方案2：可以考虑通过 refs 强制调用实例方法来进行刷新。</li>\n</ul>\n<h2 id="记忆化（memoization）是否可行？"><a href="#%E8%AE%B0%E5%BF%86%E5%8C%96%EF%BC%88memoization%EF%BC%89%E6%98%AF%E5%90%A6%E5%8F%AF%E8%A1%8C%EF%BC%9F" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>记忆化（memoization）是否可行？</h2>\n<p>我们已经看到了派生状态被用于确保在 <code class="gatsby-code-text">render</code> 方法中仅当输入改变时进行重新计算。这一技术也被认为是 <a href="https://en.wikipedia.org/wiki/Memoization">记忆化</a>。</p>\n<p>对于记忆化来说，使用派生状态并不算糟糕，但通常来说也不算最佳的解决方案。在管理派生状态存在着内涵的复杂性，而这一复杂性随着增加的属性也在不断地提升。例如，如果我们给我们的组件增加了第二个派生状态，而后我们也将在分别跟踪这二者的变更。</p>\n<p>现在来看一个接受一个 props 的组件的例子-展示一系列内容的列表-并将与用户输入匹配的查询渲染出来。我们可以用派生状态来存储过滤后的列表：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    filterText<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// *******************************************************</span>\n  <span class="token comment">// NOTE: this example is NOT the recommended approach.</span>\n  <span class="token comment">// See the examples below for our recommendations instead.</span>\n  <span class="token comment">// *******************************************************</span>\n\n  <span class="token keyword">static</span> <span class="token function">getDerivedStateFromProps</span><span class="token punctuation">(</span>props<span class="token punctuation">,</span> state<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Re-run the filter whenever the list array or filter text change.</span>\n    <span class="token comment">// Note we need to store prevPropsList and prevFilterText to detect changes.</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      props<span class="token punctuation">.</span>list <span class="token operator">!==</span> state<span class="token punctuation">.</span>prevPropsList <span class="token operator">||</span>\n      state<span class="token punctuation">.</span>prevFilterText <span class="token operator">!==</span> state<span class="token punctuation">.</span>filterText\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span>\n        prevPropsList<span class="token punctuation">:</span> props<span class="token punctuation">.</span>list<span class="token punctuation">,</span>\n        prevFilterText<span class="token punctuation">:</span> state<span class="token punctuation">.</span>filterText<span class="token punctuation">,</span>\n        filteredList<span class="token punctuation">:</span> props<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">)</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filterText<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filteredList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>该实现避免了更频繁地重复计算 <code class="gatsby-code-text">filteredList</code>。但其也更复杂，因为不得不单独地追踪和监测每一个 prop 和状态的变更以为了正确地更新过滤列表。在这一例子中，我们可以通过使用 <code class="gatsby-code-text">PureComponent</code> 以及将过滤操作放进渲染方法里来进行简化：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token comment">// PureComponents only rerender if at least one state or prop value changes.</span>\n<span class="token comment">// Change is determined by doing a shallow comparison of state and prop keys.</span>\n<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">PureComponent</span> <span class="token punctuation">{</span>\n  <span class="token comment">// State only needs to hold the current filter text value:</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span>\n    filterText<span class="token punctuation">:</span> <span class="token string">""</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filterText<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// The render method on this PureComponent is called only if</span>\n    <span class="token comment">// props.list or state.filterText has changed.</span>\n    <span class="token keyword">const</span> filteredList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>\n      item <span class="token operator">=></span> item<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>filteredList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>之前提到的方法相较于派生状态的版本要更为的清晰和简单。有时，这对于大型列表来说这一方法就可能不那么好了有可能会比较慢，<code class="gatsby-code-text">PureComponent</code> 也有可能无法阻止重渲染若另外的 prop 发生了改变。为了处理这些问题，我们可以增加一个记忆化的帮助函数来避免不必要的重新过滤我们的列表项：</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">import</span> memoize <span class="token keyword">from</span> <span class="token string">"memoize-one"</span><span class="token punctuation">;</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>\n  <span class="token comment">// State only needs to hold the current filter text value:</span>\n  state <span class="token operator">=</span> <span class="token punctuation">{</span> filterText<span class="token punctuation">:</span> <span class="token string">""</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// Re-run the filter whenever the list array or filter text changes:</span>\n  filter <span class="token operator">=</span> <span class="token function">memoize</span><span class="token punctuation">(</span>\n    <span class="token punctuation">(</span>list<span class="token punctuation">,</span> filterText<span class="token punctuation">)</span> <span class="token operator">=></span> list<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">=></span> item<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>filterText<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token function-variable function">handleChange</span> <span class="token operator">=</span> event <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">{</span> filterText<span class="token punctuation">:</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Calculate the latest filtered list. If these arguments haven\'t changed</span>\n    <span class="token comment">// since the last render, `memoize-one` will reuse the last return value.</span>\n    <span class="token keyword">const</span> filteredList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>list<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Fragment</span><span class="token punctuation">></span></span> \n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>handleChange<span class="token punctuation">}</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>filterText<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>filteredList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>item <span class="token operator">=></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>item<span class="token punctuation">.</span>text<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Fragment</span><span class="token punctuation">></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p>这一实现则更为简单且和之前派生状态的版本行为一致！</p>\n<p>当在使用记忆化时，记住几点限制：</p>\n<ol>\n<li>大多数场景，你想要<strong>记忆函数来标记组件实例</strong>。这一行为阻止了组件多个实例通过每一个不同的 key 进行重置。</li>\n<li>典型地你想要用一个缓存函数来<strong>限制缓存大小</strong>以避免时不时地内存泄露。（在前一个例子中，我们使用了 <code class="gatsby-code-text">memoize-one</code>，因为它仅缓存最新的参数和结果。）</li>\n<li>如果在每次父组件渲染时 <code class="gatsby-code-text">prop.list</code> 都重新创建，那么本节提到的所有方法都将不会起作用。但大多数场景下，这一设置是合理的。</li>\n</ol>\n<h2 id="尾声"><a href="#%E5%B0%BE%E5%A3%B0" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>尾声</h2>\n<p>真是世界的应用里，组件通常混合了受控和非受控的行为。这是没问题的！如果每一个值都只有一个清晰的来源，则可以避免之前提及的反模式。</p>\n<p>值得重申的是 <code class="gatsby-code-text">getDerivedStateFromProps</code>（通常是派生状态）是一个高级特性，由于其 复杂性应尽可能地避免使用。如果你在使用这些模式中出现了我们未曾提及的问题，可以通过 <a href="https://github.com/reactjs/reactjs.org/issues/new">Github</a> 或 <a href="https://twitter.com/reactjs">Tiwtter</a> 与我们分享！</p>',
excerpt:"React 16.4   修复了一个关于 getDerivedStateFromProps 的 bug 。若这篇文章提及了你应用中正在使用的反模式，并在修复后导致了无法正确工作，我们对此感到抱歉。在这篇文章，我们将对在派生状态下普遍使用的反模式以及我们倾向的选择方案进行说明。 在很长的一段时间，生命周期   是唯一的能够在 props 变更时更新状态而不触发渲染的唯一方式。在 16.3， 我们引入了一个替代的生命周期，  用以更安全的方式来解决同样的问题。同时，我们意识到有些用户可能会对如何使用这两个方法有很多误解，我们也发现了一些反模式会导致潜在的令人困惑的 bug。在 16.4 中修复的    使得派生状态会更容易预测 ，因此一些错误的用例会更容易注意到。 注意 本文所提及的反模式同时应用了   和   两个方法。 本文将涵盖以下主题： 何时使用派生状态 使用派生状态的一些常见问题 反模式：无条件地将 props 拷贝到状态上 (#反模式：无条件地将 props 拷贝到状态上) 反模式：当 props 更新时擦除状态 (#反模式：当 props…",frontmatter:{title:"You Probably Don't Need Derived State",next:null,prev:null,author:[{frontmatter:{name:"Brian Vaughn",url:"https://github.com/bvaughn"}}]},fields:{date:"June 06, 2018",path:"blog/2018-06-07-you-probably-dont-need-derived-state.md",slug:"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"React v16.7: No, This Is Not the One With Hooks"},fields:{slug:"/blog/2018/12/19/react-v-16-7.html"}}},{node:{frontmatter:{title:"React 16.x Roadmap"},fields:{slug:"/blog/2018/11/27/react-16-roadmap.html"}}},{node:{frontmatter:{title:"React Conf recap: Hooks, Suspense, and Concurrent Rendering"},fields:{slug:"/blog/2018/11/13/react-conf-recap.html"}}},{node:{frontmatter:{title:"React v16.6.0: lazy, memo and contextType"},fields:{slug:"/blog/2018/10/23/react-v-16-6.html"}}},{node:{frontmatter:{title:"Create React App 2.0: Babel 7, Sass, and More"},fields:{slug:"/blog/2018/10/01/create-react-app-v2.html"}}},{node:{frontmatter:{title:"Introducing the React Profiler"},fields:{slug:"/blog/2018/09/10/introducing-the-react-profiler.html"}}},{node:{frontmatter:{title:"React v16.4.2: Server-side vulnerability fix"},fields:{slug:"/blog/2018/08/01/react-v-16-4-2.html"}}},{node:{frontmatter:{title:"You Probably Don't Need Derived State"},fields:{slug:"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}},{node:{frontmatter:{title:"React v16.4.0: Pointer Events"},fields:{slug:"/blog/2018/05/23/react-v-16-4.html"}}},{node:{frontmatter:{title:"React v16.3.0: New lifecycles and context API"},fields:{slug:"/blog/2018/03/29/react-v-16-3.html"}}}]}},pathContext:{slug:"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}}});
//# sourceMappingURL=path---blog-2018-06-07-you-probably-dont-need-derived-state-html-6b52f67a23462888ec17.js.map