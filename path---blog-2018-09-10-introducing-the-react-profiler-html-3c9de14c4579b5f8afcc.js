webpackJsonp([55215319939622],{827:function(e,t){e.exports={data:{markdownRemark:{html:'<p>React 16.5 adds support for a new DevTools profiler plugin.\nThis plugin uses React’s <a href="https://github.com/reactjs/rfcs/pull/51">experimental Profiler API</a> to collect timing information about each component that’s rendered in order to identify performance bottlenecks in React applications.\nIt will be fully compatible with our upcoming <a href="/blog/2018/03/01/sneak-peek-beyond-react-16.html">time slicing and suspense</a> features.</p>\n<p>This blog post covers the following topics:</p>\n<ul>\n<li><a href="#profiling-an-application">Profiling an application</a></li>\n<li>\n<p><a href="#reading-performance-data">Reading performance data</a></p>\n<ul>\n<li><a href="#browsing-commits">Browsing commits</a></li>\n<li><a href="#filtering-commits">Filtering commits</a></li>\n<li><a href="#flame-chart">Flame chart</a></li>\n<li><a href="#ranked-chart">Ranked chart</a></li>\n<li><a href="#component-chart">Component chart</a></li>\n<li><a href="#interactions">Interactions</a></li>\n</ul>\n</li>\n<li>\n<p><a href="#troubleshooting">Troubleshooting</a></p>\n<ul>\n<li><a href="#no-profiling-data-has-been-recorded-for-the-selected-root">No profiling data has been recorded for the selected root</a></li>\n<li><a href="#no-timing-data-to-display-for-the-selected-commit">No timing data to display for the selected commit</a></li>\n</ul>\n</li>\n<li><a href="#deep-dive-video">Deep dive video</a></li>\n</ul>\n<h2 id="profiling-an-application"><a href="#profiling-an-application" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Profiling an application</h2>\n<p>DevTools will show a “Profiler” tab for applications that support the new profiling API:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/devtools-profiler-tab.png" alt="New DevTools &#x22;profiler&#x22; tab"></p>\n<blockquote>\n<p>Note:</p>\n<p><code class="gatsby-code-text">react-dom</code> 16.5+ supports profiling in DEV mode.\nA production profiling bundle is also available as <code class="gatsby-code-text">react-dom/profiling</code>.\nRead more about how to use this bundle at <a href="https://fb.me/react-profiling">fb.me/react-profiling</a> </p>\n</blockquote>\n<p>The “Profiler” panel will be empty initially. Click the record button to start profiling:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/start-profiling.png" alt="Click &#x22;record&#x22; to start profiling"></p>\n<p>Once you’ve started recording, DevTools will automatically collect performance information each time your application renders.\nUse your app as you normally would.\nWhen you are finished profiling, click the “Stop” button.</p>\n<p><img src="../images/blog/introducing-the-react-profiler/stop-profiling.png" alt="Click &#x22;stop&#x22; when you are finished profiling"></p>\n<p>Assuming your application rendered at least once while profiling, DevTools will show several ways to view the performance data.\nWe’ll <a href="#reading-performance-data">take a look at each of these below</a>.</p>\n<h2 id="reading-performance-data"><a href="#reading-performance-data" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Reading performance data</h2>\n<h3 id="browsing-commits"><a href="#browsing-commits" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Browsing commits</h3>\n<p>Conceptually, React does work in two phases:</p>\n<ul>\n<li>The <strong>render</strong> phase determines what changes need to be made to e.g. the DOM. During this phase, React calls <code class="gatsby-code-text">render</code> and then compares the result to the previous render.</li>\n<li>The <strong>commit</strong> phase is when React applies any changes. (In the case of React DOM, this is when React inserts, updates, and removes DOM nodes.) React also calls lifecycles like <code class="gatsby-code-text">componentDidMount</code> and <code class="gatsby-code-text">componentDidUpdate</code> during this phase.</li>\n</ul>\n<p>The DevTools profiler groups performance info by commit.\nCommits are displayed in a bar chart near the top of the profiler:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/commit-selector.png" alt="Bar chart of profiled commits"></p>\n<p>Each bar in the chart represents a single commit with the currently selected commit colored black.\nYou can click on a bar (or the left/right arrow buttons) to select a different commit.</p>\n<p>The color and height of each bar corresponds to how long that commit took to render.\n(Taller, yellow bars took longer than shorter, blue bars.)</p>\n<h3 id="filtering-commits"><a href="#filtering-commits" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Filtering commits</h3>\n<p>The longer you profile, the more times your application will render.\nIn some cases you may end up with <em>too many commits</em> to easily process.\nThe profiler offers a filtering mechanism to help with this.\nUse it to specify a threshold and the profiler will hide all commits that were <em>faster</em> than that value.</p>\n<p><img src="../images/blog/introducing-the-react-profiler/filtering-commits.gif" alt="Filtering commits by time"></p>\n<h3 id="flame-chart"><a href="#flame-chart" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Flame chart</h3>\n<p>The flame chart view represents the state of your application for a particular commit.\nEach bar in the chart represents a React component (e.g. <code class="gatsby-code-text">App</code>, <code class="gatsby-code-text">Nav</code>).\nThe size and color of the bar represents how long it took to render the component and its children.\n(The width of a bar represents how much time was spent <em>when the component last rendered</em> and the color represents how much time was spent <em>as part of the current commit</em>.)</p>\n<p><img src="../images/blog/introducing-the-react-profiler/flame-chart.png" alt="Example flame chart"></p>\n<blockquote>\n<p>Note:</p>\n<p>The width of a bar indicates how long it took to render the component (and its children) when they last rendered.\nIf the component did not re-render as part of this commit, the time represents a previous render.\nThe wider a component is, the longer it took to render.</p>\n<p>The color of a bar indicates how long the component (and its children) took to render in the selected commit.\nYellow components took more time, blue components took less time, and gray components did not render at all during this commit.</p>\n</blockquote>\n<p>For example, the commit shown above took a total of 18.4ms to render.\nThe <code class="gatsby-code-text">Router</code> component was the “most expensive” to render (taking 18.4ms).\nMost of this time was due to two of its children, <code class="gatsby-code-text">Nav</code> (8.4ms) and <code class="gatsby-code-text">Route</code> (7.9ms).\nThe rest of the time was divided between its remaining children or spent in the component’s own render method.</p>\n<p>You can zoom in or out on a flame chart by clicking on components:\n<img src="../images/blog/introducing-the-react-profiler/zoom-in-and-out.gif" alt="Click on a component to zoom in or out"></p>\n<p>Clicking on a component will also select it and show information in the right side panel which includes its <code class="gatsby-code-text">props</code> and <code class="gatsby-code-text">state</code> at the time of this commit.\nYou can drill into these to learn more about what the component actually rendered during the commit:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/props-and-state.gif" alt="Viewing a component&#x27;s props and state for a commit"></p>\n<p>In some cases, selecting a component and stepping between commits may also provide a hint as to <em>why</em> the component rendered:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/see-which-props-changed.gif" alt="Seeing which values changed between commits"></p>\n<p>The above image shows that <code class="gatsby-code-text">state.scrollOffset</code> changed between commits.\nThis is likely what caused the <code class="gatsby-code-text">List</code> component to re-render.</p>\n<h3 id="ranked-chart"><a href="#ranked-chart" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Ranked chart</h3>\n<p>The ranked chart view represents a single commit.\nEach bar in the chart represents a React component (e.g. <code class="gatsby-code-text">App</code>, <code class="gatsby-code-text">Nav</code>).\nThe chart is ordered so that the components which took the longest to render are at the top.</p>\n<p><img src="../images/blog/introducing-the-react-profiler/ranked-chart.png" alt="Example ranked chart"></p>\n<blockquote>\n<p>Note:</p>\n<p>A component’s render time includes the time spent rendering its children,\nso the components which took the longest to render are generally near the top of the tree.</p>\n</blockquote>\n<p>As with the flame chart, you can zoom in or out on a ranked chart by clicking on components.</p>\n<h3 id="component-chart"><a href="#component-chart" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Component chart</h3>\n<p>Sometimes it’s useful to see how many times a particular component rendered while you were profiling.\nThe component chart provides this information in the form of a bar chart.\nEach bar in the chart represents a time when the component rendered.\nThe color and height of each bar corresponds to how long the component took to render <em>relative to other components</em> in a particular commit.</p>\n<p><img src="../images/blog/introducing-the-react-profiler/component-chart.png" alt="Example component chart"></p>\n<p>The chart above shows that the <code class="gatsby-code-text">List</code> component rendered 11 times.\nIt also shows that each time it rendered, it was the most “expensive” component in the commit (meaning that it took the longest).</p>\n<p>To view this chart, either double-click on a component <em>or</em> select a component and click on the blue bar chart icon in the right detail pane.\nYou can return to the previous chart by clicking the “x” button in the right detail pane.\nYou can aso double click on a particular bar to view more information about that commit.</p>\n<p><img src="../images/blog/introducing-the-react-profiler/see-all-commits-for-a-fiber.gif" alt="How to view all renders for a specific component"></p>\n<p>If the selected component did not render at all during the profiling session, the following message will be shown:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/no-render-times-for-selected-component.png" alt="No render times for the selected component"></p>\n<h3 id="interactions"><a href="#interactions" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Interactions</h3>\n<p>React recently added another <a href="https://fb.me/react-interaction-tracing">experimental API</a> for tracing the <em>cause</em> of an update.\n“Interactions” traced with this API will also be shown in the profiler:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/interactions.png" alt="The interactions panel"></p>\n<p>The image above shows a profiling session that traced four interactions.\nEach row represents an interaction that was traced.\nThe colored dots along the row represent commits that were related to that interaction.</p>\n<p>You can also see which interactions were traced for a particular commit from the flame chart and ranked chart views as well:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/interactions-for-commit.png" alt="List of interactions for a commit"></p>\n<p>You can navigate between interactions and commits by clicking on them:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/navigate-between-interactions-and-commits.gif" alt="Navigate between interactions and commits"></p>\n<p>The tracing API is still new and we will cover it in more detail in a future blog post.</p>\n<h2 id="troubleshooting"><a href="#troubleshooting" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Troubleshooting</h2>\n<h3 id="no-profiling-data-has-been-recorded-for-the-selected-root"><a href="#no-profiling-data-has-been-recorded-for-the-selected-root" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>No profiling data has been recorded for the selected root</h3>\n<p>If your your application has multiple “roots”, you may see the following message after profiling:\n<img src="../images/blog/introducing-the-react-profiler/no-profiler-data-multi-root.png" alt="No profiling data has been recorded for the selected root"></p>\n<p>This message indicates that no performance data was recorded for the root that’s selected in the “Elements” panel.\nIn this case, try selecting a different root in that panel to view profiling information for that root:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/select-a-root-to-view-profiling-data.gif" alt="Select a root in the &#x22;Elements&#x22; panel to view its performance data"></p>\n<h3 id="no-timing-data-to-display-for-the-selected-commit"><a href="#no-timing-data-to-display-for-the-selected-commit" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>No timing data to display for the selected commit</h3>\n<p>Sometimes a commit may be so fast that <code class="gatsby-code-text">performance.now()</code> doesn’t give DevTools any meaningful timing information.\nIn this case, the following message will be shown:</p>\n<p><img src="../images/blog/introducing-the-react-profiler/no-timing-data-for-commit.png" alt="No timing data to display for the selected commit"></p>\n<h2 id="deep-dive-video"><a href="#deep-dive-video" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Deep dive video</h2>\n<p>The following video demonstrates how the React profiler can be used to detect and improve performance bottlenecks in an actual React application.</p>\n<br>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 56.25%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="https://www.youtube-nocookie.com/embed/nySib7ipZdk?rel=0" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>',excerpt:"React 16.5 adds support for a new DevTools profiler plugin.\nThis plugin uses React’s  experimental Profiler API  to collect timing information about each component that’s rendered in order to identify performance bottlenecks in React applications.\nIt will be fully compatible with our upcoming  time slicing and suspense  features. This blog post covers the following topics: Profiling an application Reading performance data Browsing commits Filtering commits Flame chart Ranked chart Component…",frontmatter:{title:"Introducing the React Profiler",next:null,prev:null,author:[{frontmatter:{name:"Brian Vaughn",url:"https://github.com/bvaughn"}}]},fields:{date:"September 09, 2018",path:"blog/2018-09-10-introducing-the-react-profiler.md",slug:"/blog/2018/09/10/introducing-the-react-profiler.html"}},allMarkdownRemark:{edges:[{node:{frontmatter:{title:"React v16.7: No, This Is Not the One With Hooks"},fields:{slug:"/blog/2018/12/19/react-v-16-7.html"}}},{node:{frontmatter:{title:"React 16.x Roadmap"},fields:{slug:"/blog/2018/11/27/react-16-roadmap.html"}}},{node:{frontmatter:{title:"React Conf recap: Hooks, Suspense, and Concurrent Rendering"},fields:{slug:"/blog/2018/11/13/react-conf-recap.html"}}},{node:{frontmatter:{title:"React v16.6.0: lazy, memo and contextType"},fields:{slug:"/blog/2018/10/23/react-v-16-6.html"}}},{node:{frontmatter:{title:"Create React App 2.0: Babel 7, Sass, and More"},fields:{slug:"/blog/2018/10/01/create-react-app-v2.html"}}},{node:{frontmatter:{title:"Introducing the React Profiler"},fields:{slug:"/blog/2018/09/10/introducing-the-react-profiler.html"}}},{node:{frontmatter:{title:"React v16.4.2: Server-side vulnerability fix"},fields:{slug:"/blog/2018/08/01/react-v-16-4-2.html"}}},{node:{frontmatter:{title:"You Probably Don't Need Derived State"},fields:{slug:"/blog/2018/06/07/you-probably-dont-need-derived-state.html"}}},{node:{frontmatter:{title:"React v16.4.0: Pointer Events"},fields:{slug:"/blog/2018/05/23/react-v-16-4.html"}}},{node:{frontmatter:{title:"React v16.3.0: New lifecycles and context API"},fields:{slug:"/blog/2018/03/29/react-v-16-3.html"}}}]}},pathContext:{slug:"/blog/2018/09/10/introducing-the-react-profiler.html"}}}});
//# sourceMappingURL=path---blog-2018-09-10-introducing-the-react-profiler-html-3c9de14c4579b5f8afcc.js.map