{"version":3,"sources":["webpack:///path---docs-typechecking-with-proptypes-html-7f948de398d4782b10b1.js","webpack:///./.cache/json/docs-typechecking-with-proptypes-html.json"],"names":["webpackJsonp","939","module","exports","data","markdownRemark","html","frontmatter","title","next","prev","fields","path","slug","pathContext"],"mappings":"AAAAA,cAAc,gBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,wupBAAswqBC,aAA4UC,MAAA,sBAAAC,KAAA,KAAAC,KAAA,MAAsDC,QAAWC,KAAA,sCAAAC,KAAA,2CAA8FC,aAAgBD,KAAA","file":"path---docs-typechecking-with-proptypes-html-7f948de398d4782b10b1.js","sourcesContent":["webpackJsonp([7295711041989],{\n\n/***/ 939:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>注意:\\n<code class=\\\"gatsby-code-text\\\">React.PropTypes</code> 自 React v15.5 起已弃用。请使用 <a href=\\\"https://www.npmjs.com/package/prop-types\\\"><code class=\\\"gatsby-code-text\\\">prop-types</code> </a> 库代替。</p>\\n</blockquote>\\n<p>随着应用日渐庞大，你可以通过类型检查捕获大量错误。 对于某些应用来说，你还可以使用 <a href=\\\"https://flowtype.org/\\\">Flow</a> 或 <a href=\\\"https://www.typescriptlang.org/\\\">TypeScript</a> 这样的 JavaScript 扩展来对整个应用程序进行类型检查。然而即使你不用它们，React 也有一些内置的类型检查功能。要检查组件的属性，你需要配置特殊的 <code class=\\\"gatsby-code-text\\\">propTypes</code> 属性：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nGreeting<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>string\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">PropTypes</code> 包含一整套验证器，可用于确保你接收的数据是有效的。在这个示例中，我们使用了 <code class=\\\"gatsby-code-text\\\">PropTypes.string</code>。当你给属性传递了无效值时，JavsScript 控制台将会打印警告。出于性能原因，<code class=\\\"gatsby-code-text\\\">propTypes</code> 只在开发模式下进行检查。</p>\\n<h3 id=\\\"proptypes\\\"><a href=\\\"#proptypes\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>PropTypes</h3>\\n<p>下面是使用不同验证器的例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nMyComponent<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 你可以将属性声明为以下 JS 原生类型</span>\\n  optionalArray<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>array<span class=\\\"token punctuation\\\">,</span>\\n  optionalBool<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>bool<span class=\\\"token punctuation\\\">,</span>\\n  optionalFunc<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">,</span>\\n  optionalNumber<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>number<span class=\\\"token punctuation\\\">,</span>\\n  optionalObject<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n  optionalString<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n  optionalSymbol<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>symbol<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 任何可被渲染的元素（包括数字、字符串、子元素或数组）。</span>\\n  optionalNode<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>node<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 一个 React 元素</span>\\n  optionalElement<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>element<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 你也可以声明属性为某个类的实例，这里使用 JS 的</span>\\n  <span class=\\\"token comment\\\">// instanceof 操作符实现。</span>\\n  optionalMessage<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">instanceOf</span><span class=\\\"token punctuation\\\">(</span>Message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 你也可以限制你的属性值是某个特定值之一</span>\\n  optionalEnum<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'News'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Photos'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 限制它为列举类型之一的对象</span>\\n  optionalUnion<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>number<span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">instanceOf</span><span class=\\\"token punctuation\\\">(</span>Message<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 一个指定元素类型的数组</span>\\n  optionalArrayOf<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arrayOf</span><span class=\\\"token punctuation\\\">(</span>PropTypes<span class=\\\"token punctuation\\\">.</span>number<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 一个指定类型的对象</span>\\n  optionalObjectOf<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">objectOf</span><span class=\\\"token punctuation\\\">(</span>PropTypes<span class=\\\"token punctuation\\\">.</span>number<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 一个指定属性及其类型的对象</span>\\n  optionalObjectWithShape<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shape</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    color<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>number\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 你也可以在任何 PropTypes 属性后面加上 `isRequired` </span>\\n  <span class=\\\"token comment\\\">// 后缀，这样如果这个属性父组件没有提供时，会打印警告信息</span>\\n  requiredFunc<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 任意类型的数据</span>\\n  requiredAny<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>any<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 你也可以指定一个自定义验证器。它应该在验证失败时返回</span>\\n  <span class=\\\"token comment\\\">// 一个 Error 对象而不是 `console.warn` 或抛出异常。</span>\\n  <span class=\\\"token comment\\\">// 不过在 `oneOfType` 中它不起作用。</span>\\n  customProp<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> propName<span class=\\\"token punctuation\\\">,</span> componentName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token regex\\\">/matchme/</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">[</span>propName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span>\\n        'Invalid prop <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`' + propName + '`</span></span> supplied to' <span class=\\\"token operator\\\">+</span>\\n        ' <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`' + componentName + '`</span></span><span class=\\\"token punctuation\\\">.</span> Validation failed<span class=\\\"token punctuation\\\">.</span>'\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 不过你可以提供一个自定义的 `arrayOf` 或 `objectOf` </span>\\n  <span class=\\\"token comment\\\">// 验证器，它应该在验证失败时返回一个 Error 对象。 它被用</span>\\n  <span class=\\\"token comment\\\">// 于验证数组或对象的每个值。验证器前两个参数的第一个是数组</span>\\n  <span class=\\\"token comment\\\">// 或对象本身，第二个是它们对应的键。</span>\\n  customArrayProp<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arrayOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>propValue<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> componentName<span class=\\\"token punctuation\\\">,</span> location<span class=\\\"token punctuation\\\">,</span> propFullName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token regex\\\">/matchme/</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>propValue<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span>\\n        'Invalid prop <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`' + propFullName + '`</span></span> supplied to' <span class=\\\"token operator\\\">+</span>\\n        ' <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`' + componentName + '`</span></span><span class=\\\"token punctuation\\\">.</span> Validation failed<span class=\\\"token punctuation\\\">.</span>'\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"限制单个子代\\\"><a href=\\\"#%E9%99%90%E5%88%B6%E5%8D%95%E4%B8%AA%E5%AD%90%E4%BB%A3\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>限制单个子代</h3>\\n<p>使用 <code class=\\\"gatsby-code-text\\\">PropTypes.element</code> 你可以指定只传递一个子代</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This must be exactly one element or it will warn.</span>\\n    <span class=\\\"token keyword\\\">const</span> children <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nMyComponent<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  children<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>element<span class=\\\"token punctuation\\\">.</span>isRequired\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"属性默认值\\\"><a href=\\\"#%E5%B1%9E%E6%80%A7%E9%BB%98%E8%AE%A4%E5%80%BC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>属性默认值</h3>\\n<p>你可以通过配置 <code class=\\\"gatsby-code-text\\\">defaultProps</code> 为 <code class=\\\"gatsby-code-text\\\">props</code>定义默认值： </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 为属性指定默认值:</span>\\nGreeting<span class=\\\"token punctuation\\\">.</span>defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Stranger'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 渲染 \\\"Hello, Stranger\\\":</span>\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Greeting</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'example'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>如果你在使用像 <a href=\\\"https://babeljs.io/docs/plugins/transform-class-properties/\\\">transform-class-properties</a> 的 Babel 转换器，你也可以在React 组件类中声明 <code class=\\\"gatsby-code-text\\\">defaultProps</code> 作为静态属性。这个语法还没有最终通过，在浏览器中需要一步编译工作。更多信息，查看<a href=\\\"https://github.com/tc39/proposal-class-fields\\\">类字段提议</a>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'stranger'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">defaultProps</code> 用来确保 <code class=\\\"gatsby-code-text\\\">this.props.name</code> 在父组件没有特别指定的情况下，有一个初始值。类型检查发生在 <code class=\\\"gatsby-code-text\\\">defaultProps</code> 赋值之后，所以类型检查也会应用在 <code class=\\\"gatsby-code-text\\\">defaultProps</code> 上面。</p>\",\"frontmatter\":{\"title\":\"使用 PropTypes 进行类型检查\",\"next\":null,\"prev\":null},\"fields\":{\"path\":\"docs/typechecking-with-proptypes.md\",\"slug\":\"docs/typechecking-with-proptypes.html\"}}},\"pathContext\":{\"slug\":\"docs/typechecking-with-proptypes.html\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-typechecking-with-proptypes-html-7f948de398d4782b10b1.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<blockquote>\\n<p>注意:\\n<code class=\\\"gatsby-code-text\\\">React.PropTypes</code> 自 React v15.5 起已弃用。请使用 <a href=\\\"https://www.npmjs.com/package/prop-types\\\"><code class=\\\"gatsby-code-text\\\">prop-types</code> </a> 库代替。</p>\\n</blockquote>\\n<p>随着应用日渐庞大，你可以通过类型检查捕获大量错误。 对于某些应用来说，你还可以使用 <a href=\\\"https://flowtype.org/\\\">Flow</a> 或 <a href=\\\"https://www.typescriptlang.org/\\\">TypeScript</a> 这样的 JavaScript 扩展来对整个应用程序进行类型检查。然而即使你不用它们，React 也有一些内置的类型检查功能。要检查组件的属性，你需要配置特殊的 <code class=\\\"gatsby-code-text\\\">propTypes</code> 属性：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nGreeting<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>string\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">PropTypes</code> 包含一整套验证器，可用于确保你接收的数据是有效的。在这个示例中，我们使用了 <code class=\\\"gatsby-code-text\\\">PropTypes.string</code>。当你给属性传递了无效值时，JavsScript 控制台将会打印警告。出于性能原因，<code class=\\\"gatsby-code-text\\\">propTypes</code> 只在开发模式下进行检查。</p>\\n<h3 id=\\\"proptypes\\\"><a href=\\\"#proptypes\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>PropTypes</h3>\\n<p>下面是使用不同验证器的例子：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\nMyComponent<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 你可以将属性声明为以下 JS 原生类型</span>\\n  optionalArray<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>array<span class=\\\"token punctuation\\\">,</span>\\n  optionalBool<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>bool<span class=\\\"token punctuation\\\">,</span>\\n  optionalFunc<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">,</span>\\n  optionalNumber<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>number<span class=\\\"token punctuation\\\">,</span>\\n  optionalObject<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>object<span class=\\\"token punctuation\\\">,</span>\\n  optionalString<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n  optionalSymbol<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>symbol<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 任何可被渲染的元素（包括数字、字符串、子元素或数组）。</span>\\n  optionalNode<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>node<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 一个 React 元素</span>\\n  optionalElement<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>element<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 你也可以声明属性为某个类的实例，这里使用 JS 的</span>\\n  <span class=\\\"token comment\\\">// instanceof 操作符实现。</span>\\n  optionalMessage<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">instanceOf</span><span class=\\\"token punctuation\\\">(</span>Message<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 你也可以限制你的属性值是某个特定值之一</span>\\n  optionalEnum<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span><span class=\\\"token string\\\">'News'</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token string\\\">'Photos'</span><span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 限制它为列举类型之一的对象</span>\\n  optionalUnion<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">oneOfType</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">[</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span>number<span class=\\\"token punctuation\\\">,</span>\\n    PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">instanceOf</span><span class=\\\"token punctuation\\\">(</span>Message<span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 一个指定元素类型的数组</span>\\n  optionalArrayOf<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arrayOf</span><span class=\\\"token punctuation\\\">(</span>PropTypes<span class=\\\"token punctuation\\\">.</span>number<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 一个指定类型的对象</span>\\n  optionalObjectOf<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">objectOf</span><span class=\\\"token punctuation\\\">(</span>PropTypes<span class=\\\"token punctuation\\\">.</span>number<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 一个指定属性及其类型的对象</span>\\n  optionalObjectWithShape<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">shape</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n    color<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>string<span class=\\\"token punctuation\\\">,</span>\\n    fontSize<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>number\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 你也可以在任何 PropTypes 属性后面加上 `isRequired` </span>\\n  <span class=\\\"token comment\\\">// 后缀，这样如果这个属性父组件没有提供时，会打印警告信息</span>\\n  requiredFunc<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>func<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 任意类型的数据</span>\\n  requiredAny<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>any<span class=\\\"token punctuation\\\">.</span>isRequired<span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 你也可以指定一个自定义验证器。它应该在验证失败时返回</span>\\n  <span class=\\\"token comment\\\">// 一个 Error 对象而不是 `console.warn` 或抛出异常。</span>\\n  <span class=\\\"token comment\\\">// 不过在 `oneOfType` 中它不起作用。</span>\\n  customProp<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">,</span> propName<span class=\\\"token punctuation\\\">,</span> componentName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token regex\\\">/matchme/</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">[</span>propName<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span>\\n        'Invalid prop <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`' + propName + '`</span></span> supplied to' <span class=\\\"token operator\\\">+</span>\\n        ' <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`' + componentName + '`</span></span><span class=\\\"token punctuation\\\">.</span> Validation failed<span class=\\\"token punctuation\\\">.</span>'\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">,</span>\\n\\n  <span class=\\\"token comment\\\">// 不过你可以提供一个自定义的 `arrayOf` 或 `objectOf` </span>\\n  <span class=\\\"token comment\\\">// 验证器，它应该在验证失败时返回一个 Error 对象。 它被用</span>\\n  <span class=\\\"token comment\\\">// 于验证数组或对象的每个值。验证器前两个参数的第一个是数组</span>\\n  <span class=\\\"token comment\\\">// 或对象本身，第二个是它们对应的键。</span>\\n  customArrayProp<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">arrayOf</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>propValue<span class=\\\"token punctuation\\\">,</span> key<span class=\\\"token punctuation\\\">,</span> componentName<span class=\\\"token punctuation\\\">,</span> location<span class=\\\"token punctuation\\\">,</span> propFullName<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">if</span> <span class=\\\"token punctuation\\\">(</span><span class=\\\"token operator\\\">!</span><span class=\\\"token regex\\\">/matchme/</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">test</span><span class=\\\"token punctuation\\\">(</span>propValue<span class=\\\"token punctuation\\\">[</span>key<span class=\\\"token punctuation\\\">]</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">new</span> <span class=\\\"token class-name\\\">Error</span><span class=\\\"token punctuation\\\">(</span>\\n        'Invalid prop <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`' + propFullName + '`</span></span> supplied to' <span class=\\\"token operator\\\">+</span>\\n        ' <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`' + componentName + '`</span></span><span class=\\\"token punctuation\\\">.</span> Validation failed<span class=\\\"token punctuation\\\">.</span>'\\n      <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"限制单个子代\\\"><a href=\\\"#%E9%99%90%E5%88%B6%E5%8D%95%E4%B8%AA%E5%AD%90%E4%BB%A3\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>限制单个子代</h3>\\n<p>使用 <code class=\\\"gatsby-code-text\\\">PropTypes.element</code> 你可以指定只传递一个子代</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">import</span> PropTypes <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'prop-types'</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">MyComponent</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// This must be exactly one element or it will warn.</span>\\n    <span class=\\\"token keyword\\\">const</span> children <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>children<span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span>children<span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\nMyComponent<span class=\\\"token punctuation\\\">.</span>propTypes <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  children<span class=\\\"token punctuation\\\">:</span> PropTypes<span class=\\\"token punctuation\\\">.</span>element<span class=\\\"token punctuation\\\">.</span>isRequired\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"属性默认值\\\"><a href=\\\"#%E5%B1%9E%E6%80%A7%E9%BB%98%E8%AE%A4%E5%80%BC\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>属性默认值</h3>\\n<p>你可以通过配置 <code class=\\\"gatsby-code-text\\\">defaultProps</code> 为 <code class=\\\"gatsby-code-text\\\">props</code>定义默认值： </p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>h1</span><span class=\\\"token punctuation\\\">></span></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>h1</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// 为属性指定默认值:</span>\\nGreeting<span class=\\\"token punctuation\\\">.</span>defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n  name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'Stranger'</span>\\n<span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 渲染 \\\"Hello, Stranger\\\":</span>\\nReactDOM<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Greeting</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">,</span>\\n  document<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getElementById</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'example'</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>如果你在使用像 <a href=\\\"https://babeljs.io/docs/plugins/transform-class-properties/\\\">transform-class-properties</a> 的 Babel 转换器，你也可以在React 组件类中声明 <code class=\\\"gatsby-code-text\\\">defaultProps</code> 作为静态属性。这个语法还没有最终通过，在浏览器中需要一步编译工作。更多信息，查看<a href=\\\"https://github.com/tc39/proposal-class-fields\\\">类字段提议</a>。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Greeting</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">static</span> defaultProps <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n    name<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string\\\">'stranger'</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>Hello<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>name<span class=\\\"token punctuation\\\">}</span><span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">defaultProps</code> 用来确保 <code class=\\\"gatsby-code-text\\\">this.props.name</code> 在父组件没有特别指定的情况下，有一个初始值。类型检查发生在 <code class=\\\"gatsby-code-text\\\">defaultProps</code> 赋值之后，所以类型检查也会应用在 <code class=\\\"gatsby-code-text\\\">defaultProps</code> 上面。</p>\",\"frontmatter\":{\"title\":\"使用 PropTypes 进行类型检查\",\"next\":null,\"prev\":null},\"fields\":{\"path\":\"docs/typechecking-with-proptypes.md\",\"slug\":\"docs/typechecking-with-proptypes.html\"}}},\"pathContext\":{\"slug\":\"docs/typechecking-with-proptypes.html\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-typechecking-with-proptypes-html.json\n// module id = 939\n// module chunks = 7295711041989"],"sourceRoot":""}