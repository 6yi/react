{"version":3,"sources":["webpack:///path---docs-higher-order-components-html-902447b25488c64f204a.js","webpack:///./.cache/json/docs-higher-order-components-html.json"],"names":["webpackJsonp","897","module","exports","data","markdownRemark","html","frontmatter","title","next","prev","fields","path","slug","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA;AAA0qiDC,aAAgiCC,MAAA,OAAAC,KAAA,KAAAC,KAAA,MAAuCC,QAAWC,KAAA,kCAAAC,KAAA,uCAAsFC,aAAgBD,KAAA","file":"path---docs-higher-order-components-html-902447b25488c64f204a.js","sourcesContent":["webpackJsonp([18188278029426],{\n\n/***/ 897:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>高阶组件（HOC）是react中的高级技术，用来重用组件逻辑。但高阶组件本身并不是React API。它只是一种模式，这种模式是由react自身的组合性质必然产生的。</p>\\n<p>具体而言，<strong>高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">higherOrderComponent</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>对比组件将props属性转变成UI，高阶组件则是将一个组件转换成另一个组件。</p>\\n<p>高阶组件在React第三方库中很常见，比如Redux的<a href=\\\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\\\"><code class=\\\"gatsby-code-text\\\">connect</code></a>方法和Relay的<a href=\\\"https://facebook.github.io/relay/docs/api-reference-relay.html#createcontainer-static-method\\\"><code class=\\\"gatsby-code-text\\\">createContainer</code></a>.</p>\\n<p>在本文档中，我们将会讨论为什么高阶组件很有用，以及该如何实现一个自己的高阶组件。</p>\\n<h2 id=\\\"使用高阶组件（hoc）解决横切关注点\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%EF%BC%88hoc%EF%BC%89%E8%A7%A3%E5%86%B3%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用高阶组件（HOC）解决横切关注点</h2>\\n<blockquote>\\n<p><strong>注意</strong></p>\\n<p>我们曾经介绍了混入（mixins）技术来解决横切关注点。现在我们意识到混入（mixins）技术产生的问题要比带来的价值大。<a href=\\\"/blog/2016/07/13/mixins-considered-harmful.html\\\">更多资料</a>介绍了为什么我们要移除混入（mixins）技术以及如何转换你已经使用了混入（mixins）技术的组件。</p>\\n</blockquote>\\n<p>在React中，组件是代码复用的主要单元。然而你会发现，一些模式用传统的组件并不直白。</p>\\n<p>例如，假设你有一个<code class=\\\"gatsby-code-text\\\">CommentList</code>组件，该组件从外部数据源订阅数据并渲染评论列表：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CommentList</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// \\\"DataSource\\\" is some global data source</span>\\n      comments<span class=\\\"token punctuation\\\">:</span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Subscribe to changes</span>\\n    DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Clean up listener</span>\\n    DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Update component state whenever the data source changes</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      comments<span class=\\\"token punctuation\\\">:</span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>comments<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>comment<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Comment</span> <span class=\\\"token attr-name\\\">comment</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>comment<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">key</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>comment<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后，你又写了一个订阅单个博客文章的组件，该组件遵循类似的模式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BlogPost</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      blogPost<span class=\\\"token punctuation\\\">:</span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBlogPost</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      blogPost<span class=\\\"token punctuation\\\">:</span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBlogPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TextBlock</span> <span class=\\\"token attr-name\\\">text</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>blogPost<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">CommentList</code> 和 <code class=\\\"gatsby-code-text\\\">BlogPost</code> 组件并不相同——他们调用 <code class=\\\"gatsby-code-text\\\">DataSource</code> 的方法不同，并且他们渲染的输出也不相同。但是，他们有很多实现是相同的：</p>\\n<ul>\\n<li>挂载组件时， 向 <code class=\\\"gatsby-code-text\\\">DataSource</code> 添加一个改变监听器。</li>\\n<li>在监听器内， 每当数据源发生改变时，调用<code class=\\\"gatsby-code-text\\\">setState</code>。</li>\\n<li>卸载组件时， 移除改变监听器。</li>\\n</ul>\\n<p>设想一下，在一个大型的应用中，这种从<code class=\\\"gatsby-code-text\\\">DataSource</code>订阅数据并调用<code class=\\\"gatsby-code-text\\\">setState</code>的模式将会一次又一次的发生。我们希望一个抽象允许我们定义这种逻辑，在单个地方，并且许多组件都可以共享它，这就是高阶组件的杰出所在。</p>\\n<p>我们可以写一个创建组件的函数，创建的组件类似<code class=\\\"gatsby-code-text\\\">CommonList</code>和<code class=\\\"gatsby-code-text\\\">BlogPost</code>一样订阅到<code class=\\\"gatsby-code-text\\\">DataSource</code>。该函数接受它的参数之一作为一个子组件，子组件又接受订阅的数据作为一个属性(prop)。让我们称这个函数为<code class=\\\"gatsby-code-text\\\">withSubscription</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> CommentListWithSubscription <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withSubscription</span><span class=\\\"token punctuation\\\">(</span>\\n  CommentList<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> BlogPostWithSubscription <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withSubscription</span><span class=\\\"token punctuation\\\">(</span>\\n  BlogPost<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBlogPost</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>第一个参数是被包裹的组件，第二个参数检索所需要的数据，从给定的<code class=\\\"gatsby-code-text\\\">DataSource</code>和当前props属性中。</p>\\n<blockquote>\\n<p>译者注：根据代码示例，这里应该是高阶组件的props属性</p>\\n</blockquote>\\n<p>当渲染 <code class=\\\"gatsby-code-text\\\">CommentListWithSubscription</code> 和 <code class=\\\"gatsby-code-text\\\">BlogPostWithSubscription</code> 时, 会向<code class=\\\"gatsby-code-text\\\">CommentList</code> 和 <code class=\\\"gatsby-code-text\\\">BlogPost</code> 传递一个 <code class=\\\"gatsby-code-text\\\">data</code> 属性，该 <code class=\\\"gatsby-code-text\\\">data</code>属性带有从 <code class=\\\"gatsby-code-text\\\">DataSource</code> 检索的最新数据：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// This function takes a component...</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withSubscription</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">,</span> selectData<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...and returns another component...</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>Component <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">selectData</span><span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ... that takes care of the subscription...</span>\\n      DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">handleChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">selectData</span><span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ... and renders the wrapped component with the fresh data!</span>\\n      <span class=\\\"token comment\\\">// Notice that we pass through any additional props</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>WrappedComponent</span> <span class=\\\"token attr-name\\\">data</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>注意，高阶组件既不会修改输入组件，也不会使用继承拷贝它的行为。而是，高阶组件 <em>组合（composes）</em> 原始组件，通过用一个容器组件 <em>包裹着（wrapping）</em> 原始组件。高阶组件就是一个没有副作用的纯函数。</p>\\n<p>就是这样！被包裹的组件接收容器的所有props属性以及一个新属性<code class=\\\"gatsby-code-text\\\">data</code>用于渲染输出。高阶组件并不关心数据使用的方式和原因，而被包裹的组件也不关心数据来自何处。</p>\\n<p>因为 <code class=\\\"gatsby-code-text\\\">withSubscription</code> 就是一个普通函数，你可以按需添加可多可少的参数。例如，你或许会想使 <code class=\\\"gatsby-code-text\\\">data</code> 属性的名字是可配置的，以进一步从被包裹的组件隔离高阶组件。或者你想要接收一个参数用于配置 <code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>，或配置数据源。所有的这些都是可以的，因为高阶组件充分地控制新组件定义的方式。</p>\\n<p>和普通组件一样，<code class=\\\"gatsby-code-text\\\">withSubscription</code> 和被包裹的组件之间的合约是完全基于props属性的。这使得易于替换一个高阶组件到另一个，只要他们提供相同的props属性给被包裹的组件即可。这可以用于你改变获取数据的库时，举例来说。</p>\\n<h2 id=\\\"不要改变原始组件，使用组合\\\"><a href=\\\"#%E4%B8%8D%E8%A6%81%E6%94%B9%E5%8F%98%E5%8E%9F%E5%A7%8B%E7%BB%84%E4%BB%B6%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%BB%84%E5%90%88\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>不要改变原始组件，使用组合</h2>\\n<p>抵制诱惑，不要在高阶组件内修改一个组件的原型（或以其它方式修改组件）。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">logProps</span><span class=\\\"token punctuation\\\">(</span>InputComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  InputComponent<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">componentWillReceiveProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Current props: '</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Next props: '</span><span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// The fact that we're returning the original input is a hint that it has</span>\\n  <span class=\\\"token comment\\\">// been mutated.</span>\\n  <span class=\\\"token keyword\\\">return</span> InputComponent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// EnhancedComponent will log whenever props are received</span>\\n<span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">logProps</span><span class=\\\"token punctuation\\\">(</span>InputComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>上面的示例有一些问题。首先就是，输入组件不能独立于增强型组件（enhanced component）被重用。更致命的是，如果你在<code class=\\\"gatsby-code-text\\\">EnhancedComponent</code>上应用另一个高阶组件，同样也去改变<code class=\\\"gatsby-code-text\\\">componentWillReceiveProps</code>，第一个高阶组件的功能就会被覆盖。这样的高阶组件对没有生命周期方法的函数式组件也是无效的。</p>\\n<p>修改高阶组件泄露了组件的抽象性——使用者必须知道他们的实现方式，才能避免与其它高阶组件的冲突。</p>\\n<p>与修改组件相反，高阶组件应该使用组合技术，将输入组件包裹到一个容器组件中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">logProps</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>Component <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">componentWillReceiveProps</span><span class=\\\"token punctuation\\\">(</span>nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Current props: '</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Next props: '</span><span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 用容器包裹输入组件，不要修改它，漂亮！</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>WrappedComponent</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这个高阶组件和那个更改型版本有着同样的功能，但却避免了潜在的冲突。它对类组件和函数式组件适用性同样好。而且，因为它是纯函数，它是可组合的，可以和其它高阶组件，甚至和它自身组合。</p>\\n<p>你可能发现了高阶组件和<strong>容器组件</strong>模式的相似之处。容器组件是专注于在高层和低层关注之间进行责任分离的策略的一部分。容器管理的事情诸如订阅和状态，传递props属性给某些组件。这些组件处理渲染UI等事情。高阶组件使用容器作为他们实现的一部分。你也可以认为高阶组件就是参数化的容器组件定义。</p>\\n<h2 id=\\\"约定：贯穿传递不相关props属性给被包裹的组件\\\"><a href=\\\"#%E7%BA%A6%E5%AE%9A%EF%BC%9A%E8%B4%AF%E7%A9%BF%E4%BC%A0%E9%80%92%E4%B8%8D%E7%9B%B8%E5%85%B3props%E5%B1%9E%E6%80%A7%E7%BB%99%E8%A2%AB%E5%8C%85%E8%A3%B9%E7%9A%84%E7%BB%84%E4%BB%B6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>约定：贯穿传递不相关props属性给被包裹的组件</h2>\\n<p>高阶组件添加了一些特性到一个组件，他们不应该大幅修改它的合约。被期待的是，从高阶组件返回的那个组件与被包裹的组件具有类似的接口。</p>\\n<p>高阶组件应该贯穿传递与它专门关注无关的props属性。大多数高阶组件都包含类似如下的渲染方法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 过滤掉专用于这个阶组件的props属性，</span>\\n  <span class=\\\"token comment\\\">// 不应该被贯穿传递</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> extraProp<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>passThroughProps <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 向被包裹的组件注入props属性，这些一般都是状态值或</span>\\n  <span class=\\\"token comment\\\">// 实例方法</span>\\n  <span class=\\\"token keyword\\\">const</span> injectedProp <span class=\\\"token operator\\\">=</span> someStateOrInstanceMethod<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 向被包裹的组件传递props属性</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>WrappedComponent</span>\\n      <span class=\\\"token attr-name\\\">injectedProp</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>injectedProp<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">passThroughProps</span><span class=\\\"token punctuation\\\">}</span></span>\\n    <span class=\\\"token punctuation\\\">/></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这个约定帮助确保高阶组件最大程度的灵活性和可重用性。</p>\\n<h2 id=\\\"约定：最大化的组合性\\\"><a href=\\\"#%E7%BA%A6%E5%AE%9A%EF%BC%9A%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E7%BB%84%E5%90%88%E6%80%A7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>约定：最大化的组合性</h2>\\n<p>并不是所有的高阶组件看起来都是一样的。有时，它们仅接收单独一个参数，即被包裹的组件：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> NavbarWithRouter <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withRouter</span><span class=\\\"token punctuation\\\">(</span>Navbar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>一般而言，高阶组件会接收额外的参数。在下面这个来自Relay的示例中，一个<code class=\\\"gatsby-code-text\\\">config</code>对象用于指定组件的数据依赖：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> CommentWithRelay <span class=\\\"token operator\\\">=</span> Relay<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createContainer</span><span class=\\\"token punctuation\\\">(</span>Comment<span class=\\\"token punctuation\\\">,</span> config<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>高阶组件最常见签名如下所示：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// React Redux's `connect`</span>\\n<span class=\\\"token keyword\\\">const</span> ConnectedComment <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>commentSelector<span class=\\\"token punctuation\\\">,</span> commentActions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>Comment<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><em>什么？！</em> 如果你把它剥开，你就很容易看明白到底是怎么回事了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// connect是一个返回函数的函数（译者注：就是个高阶函数）</span>\\n<span class=\\\"token keyword\\\">const</span> enhance <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>commentListSelector<span class=\\\"token punctuation\\\">,</span> commentListActions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 返回的函数就是一个高阶组件，该高阶组件返回一个组件被连接</span>\\n<span class=\\\"token comment\\\">// 到Redux store</span>\\n<span class=\\\"token keyword\\\">const</span> ConnectedComment <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>CommentList<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>换句话说，<code class=\\\"gatsby-code-text\\\">connect</code> 是一个返回高阶组件的高阶函数！</p>\\n<p>这种形式有点让人迷惑，有点多余，但是它有一个有用的性质。那就是，单独一个参数的高阶组件，类似 <code class=\\\"gatsby-code-text\\\">connect</code> 函数返回的，签名是<code class=\\\"gatsby-code-text\\\">Component =&gt; Component</code>。输入和输出类型相同的函数确实是很容易组合在一起。</p>\\n<!-- 对以下代码的个人理解：第一段代码对初始组件进行了两次包装；第二段代码就是函数的柯里化 -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// 不要这样做……</span>\\n<span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>commentSelector<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ……你可以使用一个函数组合工具</span>\\n<span class=\\\"token comment\\\">// compose(f, g, h) 和 (...args) => f(g(h(...args)))是一样的</span>\\n<span class=\\\"token keyword\\\">const</span> enhance <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">compose</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token comment\\\">// 这些都是单独一个参数的高阶组件</span>\\n  withRouter<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>commentSelector<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>（这个同样的性质也允许<code class=\\\"gatsby-code-text\\\">connect</code>函数和其它增强型高阶组件被用作装饰器，这是一个试验JavaScript建议。）</p>\\n<p>包括lodash（比如说<a href=\\\"https://lodash.com/docs/#flowRight\\\"><code class=\\\"gatsby-code-text\\\">lodash.flowRight</code></a>）, <a href=\\\"http://redux.js.org/docs/api/compose.html\\\"><code class=\\\"gatsby-code-text\\\">Redux</code></a> 和 <a href=\\\"http://ramdajs.com/docs/#compose\\\"><code class=\\\"gatsby-code-text\\\">Ramda</code></a>在内的许多第三方库都提供了类似<code class=\\\"gatsby-code-text\\\">compose</code>功能的函数。</p>\\n<h2 id=\\\"约定：包装显示名字以便于调试\\\"><a href=\\\"#%E7%BA%A6%E5%AE%9A%EF%BC%9A%E5%8C%85%E8%A3%85%E6%98%BE%E7%A4%BA%E5%90%8D%E5%AD%97%E4%BB%A5%E4%BE%BF%E4%BA%8E%E8%B0%83%E8%AF%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>约定：包装显示名字以便于调试</h2>\\n<p>高阶组件创建的容器组件在<a href=\\\"https://github.com/facebook/react-devtools\\\"><code class=\\\"gatsby-code-text\\\">React Developer Tools</code></a>中的表现和其它的普通组件是一样的。为了便于调试，可以选择一个显示名字，传达它是一个高阶组件的结果。</p>\\n<p>最常用的技术是包裹显示名字给被包裹的组件。所以，如果你的高阶组件名字是 <code class=\\\"gatsby-code-text\\\">withSubscription</code>，且被包裹的组件的显示名字是 <code class=\\\"gatsby-code-text\\\">CommentList</code>，那么就是用 <code class=\\\"gatsby-code-text\\\">WithSubscription(CommentList)</code>这样的显示名字：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withSubscription</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">WithSubscription</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span>\\n  WithSubscription<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`WithSubscription(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token function\\\">getDisplayName</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> WithSubscription<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getDisplayName</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> WrappedComponent<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> WrappedComponent<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'Component'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"告诫\\\"><a href=\\\"#%E5%91%8A%E8%AF%AB\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>告诫</h2>\\n<p>如果你是React新手，你要知道高阶组件自身也有一些不是太明显的告诫。</p>\\n<h3 id=\\\"不要在render方法内使用高阶组件\\\"><a href=\\\"#%E4%B8%8D%E8%A6%81%E5%9C%A8render%E6%96%B9%E6%B3%95%E5%86%85%E4%BD%BF%E7%94%A8%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>不要在render方法内使用高阶组件</h3>\\n<p>React的差分算法（称为协调）使用组件标识确定是否更新现有的子树或扔掉它并重新挂载一个新的。如果<code class=\\\"gatsby-code-text\\\">render</code>方法返回的组件和前一次渲染返回的组件是完全相同的(<code class=\\\"gatsby-code-text\\\">===</code>)，React就递归地更新子树，这是通过差分它和新的那个完成。如果它们不相等，前一个子树被完全卸载掉。</p>\\n<p>一般而言，你不需要考虑差分算法的原理。但是它和高阶函数有关。因为它意味着你不能在组件的<code class=\\\"gatsby-code-text\\\">render</code>方法之内应用高阶函数到组件：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 每一次渲染，都会创建一个新的EnhancedComponent版本</span>\\n  <span class=\\\"token comment\\\">// EnhancedComponent1 !== EnhancedComponent2</span>\\n  <span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>MyComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 那引起每一次都会使子对象树完全被卸载/重新加载</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>EnhancedComponent</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里产生的问题不仅仅是性能问题——还有，重新加载一个组件会引起原有组件的状态和它的所有子组件丢失。</p>\\n<p>相反，应用高阶组件在组件定义的外面，可以使结果组件只创建一次。那么，它的标识将都是一致的遍及多次渲染。这通常是你想要的，无论如何。</p>\\n<p>在很少的情况下，你可能需要动态的应用高阶组件。你也可以在组件的生命周期方法或构造函数中操作。</p>\\n<h3 id=\\\"必须将静态方法做拷贝\\\"><a href=\\\"#%E5%BF%85%E9%A1%BB%E5%B0%86%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%81%9A%E6%8B%B7%E8%B4%9D\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>必须将静态方法做拷贝</h3>\\n<p>有时，在React组件上定义静态方法是十分有用的。例如，Relay容器就暴露一个静态方法<code class=\\\"gatsby-code-text\\\">getFragment</code>便于组合GraphQL的代码片段。</p>\\n<p>当你应用一个高阶组件到一个组件时，尽管，原始组件被包裹于一个容器组件内，也就意味着新组件会没有原始组件的任何静态方法。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// 定义静态方法</span>\\nWrappedComponent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">staticMethod</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/*...*/</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 使用高阶组件</span>\\n<span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 增强型组件没有静态方法</span>\\n<span class=\\\"token keyword\\\">typeof</span> EnhancedComponent<span class=\\\"token punctuation\\\">.</span>staticMethod <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>为解决这个问题，在返回之前，将原始组件的方法拷贝给容器：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Enhance</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/*...*/</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 必须得知道要拷贝的方法 :(</span>\\n  Enhance<span class=\\\"token punctuation\\\">.</span>staticMethod <span class=\\\"token operator\\\">=</span> WrappedComponent<span class=\\\"token punctuation\\\">.</span>staticMethod<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> Enhance<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这样做，就需要你清楚的知道都有哪些静态方法需要拷贝。你可以使用<a href=\\\"https://github.com/mridgway/hoist-non-react-statics\\\">hoist-non-react-statics</a>来帮你自动处理，它会自动拷贝所有非React的静态方法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">import</span> hoistNonReactStatic <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'hoist-non-react-statics'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Enhance</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/*...*/</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">hoistNonReactStatic</span><span class=\\\"token punctuation\\\">(</span>Enhance<span class=\\\"token punctuation\\\">,</span> WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> Enhance<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>另外一个可能的解决方案就是分别导出组件自身的静态方法。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// Instead of...</span>\\nMyComponent<span class=\\\"token punctuation\\\">.</span>someFunction <span class=\\\"token operator\\\">=</span> someFunction<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> MyComponent<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...export the method separately...</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> someFunction <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...and in the consuming module, import both</span>\\n<span class=\\\"token keyword\\\">import</span> MyComponent<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> someFunction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./MyComponent.js'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"refs属性不能贯穿传递\\\"><a href=\\\"#refs%E5%B1%9E%E6%80%A7%E4%B8%8D%E8%83%BD%E8%B4%AF%E7%A9%BF%E4%BC%A0%E9%80%92\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refs属性不能贯穿传递</h3>\\n<p>一般来说，高阶组件可以传递所有的props属性给包裹的组件，但是不能传递refs引用。因为并不是像<code class=\\\"gatsby-code-text\\\">key</code>一样，refs是一个伪属性，React对它进行了特殊处理。如果你向一个由高阶组件创建的组件的元素添加ref引用，那么ref指向的是最外层容器组件实例的，而不是被包裹的组件。</p>\\n<p>现在我们提供一个名为 <code class=\\\"gatsby-code-text\\\">React.forwardRef</code> 的 API 来解决这一问题（在 React 16.3 版本中）。<a href=\\\"/docs/forwarding-refs.html\\\">在 refs 传递章节中了解详情</a>。</p>\",\"frontmatter\":{\"title\":\"高阶组件\",\"next\":null,\"prev\":null},\"fields\":{\"path\":\"docs/higher-order-components.md\",\"slug\":\"docs/higher-order-components.html\"}}},\"pathContext\":{\"slug\":\"docs/higher-order-components.html\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---docs-higher-order-components-html-902447b25488c64f204a.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<p>高阶组件（HOC）是react中的高级技术，用来重用组件逻辑。但高阶组件本身并不是React API。它只是一种模式，这种模式是由react自身的组合性质必然产生的。</p>\\n<p>具体而言，<strong>高阶组件就是一个函数，且该函数接受一个组件作为参数，并返回一个新的组件。</strong></p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">higherOrderComponent</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>对比组件将props属性转变成UI，高阶组件则是将一个组件转换成另一个组件。</p>\\n<p>高阶组件在React第三方库中很常见，比如Redux的<a href=\\\"https://github.com/reactjs/react-redux/blob/master/docs/api.md#connectmapstatetoprops-mapdispatchtoprops-mergeprops-options\\\"><code class=\\\"gatsby-code-text\\\">connect</code></a>方法和Relay的<a href=\\\"https://facebook.github.io/relay/docs/api-reference-relay.html#createcontainer-static-method\\\"><code class=\\\"gatsby-code-text\\\">createContainer</code></a>.</p>\\n<p>在本文档中，我们将会讨论为什么高阶组件很有用，以及该如何实现一个自己的高阶组件。</p>\\n<h2 id=\\\"使用高阶组件（hoc）解决横切关注点\\\"><a href=\\\"#%E4%BD%BF%E7%94%A8%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6%EF%BC%88hoc%EF%BC%89%E8%A7%A3%E5%86%B3%E6%A8%AA%E5%88%87%E5%85%B3%E6%B3%A8%E7%82%B9\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>使用高阶组件（HOC）解决横切关注点</h2>\\n<blockquote>\\n<p><strong>注意</strong></p>\\n<p>我们曾经介绍了混入（mixins）技术来解决横切关注点。现在我们意识到混入（mixins）技术产生的问题要比带来的价值大。<a href=\\\"/blog/2016/07/13/mixins-considered-harmful.html\\\">更多资料</a>介绍了为什么我们要移除混入（mixins）技术以及如何转换你已经使用了混入（mixins）技术的组件。</p>\\n</blockquote>\\n<p>在React中，组件是代码复用的主要单元。然而你会发现，一些模式用传统的组件并不直白。</p>\\n<p>例如，假设你有一个<code class=\\\"gatsby-code-text\\\">CommentList</code>组件，该组件从外部数据源订阅数据并渲染评论列表：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">CommentList</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// \\\"DataSource\\\" is some global data source</span>\\n      comments<span class=\\\"token punctuation\\\">:</span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Subscribe to changes</span>\\n    DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Clean up listener</span>\\n    DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token comment\\\">// Update component state whenever the data source changes</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      comments<span class=\\\"token punctuation\\\">:</span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n        <span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>comments<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">map</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">(</span>comment<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> <span class=\\\"token punctuation\\\">(</span>\\n          <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>Comment</span> <span class=\\\"token attr-name\\\">comment</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>comment<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token attr-name\\\">key</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>comment<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span>\\n        <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">}</span>\\n      <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;/</span>div</span><span class=\\\"token punctuation\\\">></span></span>\\n    <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>然后，你又写了一个订阅单个博客文章的组件，该组件遵循类似的模式：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">BlogPost</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n      blogPost<span class=\\\"token punctuation\\\">:</span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBlogPost</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">handleChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n      blogPost<span class=\\\"token punctuation\\\">:</span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBlogPost</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n    <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n\\n  <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>TextBlock</span> <span class=\\\"token attr-name\\\">text</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>blogPost<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p><code class=\\\"gatsby-code-text\\\">CommentList</code> 和 <code class=\\\"gatsby-code-text\\\">BlogPost</code> 组件并不相同——他们调用 <code class=\\\"gatsby-code-text\\\">DataSource</code> 的方法不同，并且他们渲染的输出也不相同。但是，他们有很多实现是相同的：</p>\\n<ul>\\n<li>挂载组件时， 向 <code class=\\\"gatsby-code-text\\\">DataSource</code> 添加一个改变监听器。</li>\\n<li>在监听器内， 每当数据源发生改变时，调用<code class=\\\"gatsby-code-text\\\">setState</code>。</li>\\n<li>卸载组件时， 移除改变监听器。</li>\\n</ul>\\n<p>设想一下，在一个大型的应用中，这种从<code class=\\\"gatsby-code-text\\\">DataSource</code>订阅数据并调用<code class=\\\"gatsby-code-text\\\">setState</code>的模式将会一次又一次的发生。我们希望一个抽象允许我们定义这种逻辑，在单个地方，并且许多组件都可以共享它，这就是高阶组件的杰出所在。</p>\\n<p>我们可以写一个创建组件的函数，创建的组件类似<code class=\\\"gatsby-code-text\\\">CommonList</code>和<code class=\\\"gatsby-code-text\\\">BlogPost</code>一样订阅到<code class=\\\"gatsby-code-text\\\">DataSource</code>。该函数接受它的参数之一作为一个子组件，子组件又接受订阅的数据作为一个属性(prop)。让我们称这个函数为<code class=\\\"gatsby-code-text\\\">withSubscription</code>：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> CommentListWithSubscription <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withSubscription</span><span class=\\\"token punctuation\\\">(</span>\\n  CommentList<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getComments</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token keyword\\\">const</span> BlogPostWithSubscription <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withSubscription</span><span class=\\\"token punctuation\\\">(</span>\\n  BlogPost<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">=></span> DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">getBlogPost</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">.</span>id<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>第一个参数是被包裹的组件，第二个参数检索所需要的数据，从给定的<code class=\\\"gatsby-code-text\\\">DataSource</code>和当前props属性中。</p>\\n<blockquote>\\n<p>译者注：根据代码示例，这里应该是高阶组件的props属性</p>\\n</blockquote>\\n<p>当渲染 <code class=\\\"gatsby-code-text\\\">CommentListWithSubscription</code> 和 <code class=\\\"gatsby-code-text\\\">BlogPostWithSubscription</code> 时, 会向<code class=\\\"gatsby-code-text\\\">CommentList</code> 和 <code class=\\\"gatsby-code-text\\\">BlogPost</code> 传递一个 <code class=\\\"gatsby-code-text\\\">data</code> 属性，该 <code class=\\\"gatsby-code-text\\\">data</code>属性带有从 <code class=\\\"gatsby-code-text\\\">DataSource</code> 检索的最新数据：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// This function takes a component...</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withSubscription</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">,</span> selectData<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// ...and returns another component...</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>Component <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">constructor</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">super</span><span class=\\\"token punctuation\\\">(</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">bind</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">selectData</span><span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">,</span> props<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">componentDidMount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ... that takes care of the subscription...</span>\\n      DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">addChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">componentWillUnmount</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      DataSource<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">removeChangeListener</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>handleChange<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">handleChange</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">setState</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">{</span>\\n        data<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token function\\\">selectData</span><span class=\\\"token punctuation\\\">(</span>DataSource<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span>\\n      <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// ... and renders the wrapped component with the fresh data!</span>\\n      <span class=\\\"token comment\\\">// Notice that we pass through any additional props</span>\\n<span class=\\\"gatsby-highlight-code-line\\\">      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>WrappedComponent</span> <span class=\\\"token attr-name\\\">data</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span><span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>state<span class=\\\"token punctuation\\\">.</span>data<span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n</span>    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>注意，高阶组件既不会修改输入组件，也不会使用继承拷贝它的行为。而是，高阶组件 <em>组合（composes）</em> 原始组件，通过用一个容器组件 <em>包裹着（wrapping）</em> 原始组件。高阶组件就是一个没有副作用的纯函数。</p>\\n<p>就是这样！被包裹的组件接收容器的所有props属性以及一个新属性<code class=\\\"gatsby-code-text\\\">data</code>用于渲染输出。高阶组件并不关心数据使用的方式和原因，而被包裹的组件也不关心数据来自何处。</p>\\n<p>因为 <code class=\\\"gatsby-code-text\\\">withSubscription</code> 就是一个普通函数，你可以按需添加可多可少的参数。例如，你或许会想使 <code class=\\\"gatsby-code-text\\\">data</code> 属性的名字是可配置的，以进一步从被包裹的组件隔离高阶组件。或者你想要接收一个参数用于配置 <code class=\\\"gatsby-code-text\\\">shouldComponentUpdate</code>，或配置数据源。所有的这些都是可以的，因为高阶组件充分地控制新组件定义的方式。</p>\\n<p>和普通组件一样，<code class=\\\"gatsby-code-text\\\">withSubscription</code> 和被包裹的组件之间的合约是完全基于props属性的。这使得易于替换一个高阶组件到另一个，只要他们提供相同的props属性给被包裹的组件即可。这可以用于你改变获取数据的库时，举例来说。</p>\\n<h2 id=\\\"不要改变原始组件，使用组合\\\"><a href=\\\"#%E4%B8%8D%E8%A6%81%E6%94%B9%E5%8F%98%E5%8E%9F%E5%A7%8B%E7%BB%84%E4%BB%B6%EF%BC%8C%E4%BD%BF%E7%94%A8%E7%BB%84%E5%90%88\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>不要改变原始组件，使用组合</h2>\\n<p>抵制诱惑，不要在高阶组件内修改一个组件的原型（或以其它方式修改组件）。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">logProps</span><span class=\\\"token punctuation\\\">(</span>InputComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  InputComponent<span class=\\\"token punctuation\\\">.</span>prototype<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">componentWillReceiveProps</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span>nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Current props: '</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Next props: '</span><span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// The fact that we're returning the original input is a hint that it has</span>\\n  <span class=\\\"token comment\\\">// been mutated.</span>\\n  <span class=\\\"token keyword\\\">return</span> InputComponent<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token comment\\\">// EnhancedComponent will log whenever props are received</span>\\n<span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">logProps</span><span class=\\\"token punctuation\\\">(</span>InputComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>上面的示例有一些问题。首先就是，输入组件不能独立于增强型组件（enhanced component）被重用。更致命的是，如果你在<code class=\\\"gatsby-code-text\\\">EnhancedComponent</code>上应用另一个高阶组件，同样也去改变<code class=\\\"gatsby-code-text\\\">componentWillReceiveProps</code>，第一个高阶组件的功能就会被覆盖。这样的高阶组件对没有生命周期方法的函数式组件也是无效的。</p>\\n<p>修改高阶组件泄露了组件的抽象性——使用者必须知道他们的实现方式，才能避免与其它高阶组件的冲突。</p>\\n<p>与修改组件相反，高阶组件应该使用组合技术，将输入组件包裹到一个容器组件中：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">logProps</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">extends</span> React<span class=\\\"token punctuation\\\">.</span>Component <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token function\\\">componentWillReceiveProps</span><span class=\\\"token punctuation\\\">(</span>nextProps<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Current props: '</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n      console<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">log</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string\\\">'Next props: '</span><span class=\\\"token punctuation\\\">,</span> nextProps<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n      <span class=\\\"token comment\\\">// 用容器包裹输入组件，不要修改它，漂亮！</span>\\n      <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>WrappedComponent</span> <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">this</span><span class=\\\"token punctuation\\\">.</span><span class=\\\"token attr-value\\\">props</span><span class=\\\"token punctuation\\\">}</span></span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这个高阶组件和那个更改型版本有着同样的功能，但却避免了潜在的冲突。它对类组件和函数式组件适用性同样好。而且，因为它是纯函数，它是可组合的，可以和其它高阶组件，甚至和它自身组合。</p>\\n<p>你可能发现了高阶组件和<strong>容器组件</strong>模式的相似之处。容器组件是专注于在高层和低层关注之间进行责任分离的策略的一部分。容器管理的事情诸如订阅和状态，传递props属性给某些组件。这些组件处理渲染UI等事情。高阶组件使用容器作为他们实现的一部分。你也可以认为高阶组件就是参数化的容器组件定义。</p>\\n<h2 id=\\\"约定：贯穿传递不相关props属性给被包裹的组件\\\"><a href=\\\"#%E7%BA%A6%E5%AE%9A%EF%BC%9A%E8%B4%AF%E7%A9%BF%E4%BC%A0%E9%80%92%E4%B8%8D%E7%9B%B8%E5%85%B3props%E5%B1%9E%E6%80%A7%E7%BB%99%E8%A2%AB%E5%8C%85%E8%A3%B9%E7%9A%84%E7%BB%84%E4%BB%B6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>约定：贯穿传递不相关props属性给被包裹的组件</h2>\\n<p>高阶组件添加了一些特性到一个组件，他们不应该大幅修改它的合约。被期待的是，从高阶组件返回的那个组件与被包裹的组件具有类似的接口。</p>\\n<p>高阶组件应该贯穿传递与它专门关注无关的props属性。大多数高阶组件都包含类似如下的渲染方法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 过滤掉专用于这个阶组件的props属性，</span>\\n  <span class=\\\"token comment\\\">// 不应该被贯穿传递</span>\\n  <span class=\\\"token keyword\\\">const</span> <span class=\\\"token punctuation\\\">{</span> extraProp<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token operator\\\">...</span>passThroughProps <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">this</span><span class=\\\"token punctuation\\\">.</span>props<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 向被包裹的组件注入props属性，这些一般都是状态值或</span>\\n  <span class=\\\"token comment\\\">// 实例方法</span>\\n  <span class=\\\"token keyword\\\">const</span> injectedProp <span class=\\\"token operator\\\">=</span> someStateOrInstanceMethod<span class=\\\"token punctuation\\\">;</span>\\n\\n  <span class=\\\"token comment\\\">// 向被包裹的组件传递props属性</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token punctuation\\\">(</span>\\n    <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>WrappedComponent</span>\\n      <span class=\\\"token attr-name\\\">injectedProp</span><span class=\\\"token script language-javascript\\\"><span class=\\\"token script-punctuation punctuation\\\">=</span><span class=\\\"token punctuation\\\">{</span>injectedProp<span class=\\\"token punctuation\\\">}</span></span>\\n      <span class=\\\"token spread\\\"><span class=\\\"token punctuation\\\">{</span><span class=\\\"token punctuation\\\">...</span><span class=\\\"token attr-value\\\">passThroughProps</span><span class=\\\"token punctuation\\\">}</span></span>\\n    <span class=\\\"token punctuation\\\">/></span></span>\\n  <span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这个约定帮助确保高阶组件最大程度的灵活性和可重用性。</p>\\n<h2 id=\\\"约定：最大化的组合性\\\"><a href=\\\"#%E7%BA%A6%E5%AE%9A%EF%BC%9A%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E7%BB%84%E5%90%88%E6%80%A7\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>约定：最大化的组合性</h2>\\n<p>并不是所有的高阶组件看起来都是一样的。有时，它们仅接收单独一个参数，即被包裹的组件：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> NavbarWithRouter <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withRouter</span><span class=\\\"token punctuation\\\">(</span>Navbar<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>一般而言，高阶组件会接收额外的参数。在下面这个来自Relay的示例中，一个<code class=\\\"gatsby-code-text\\\">config</code>对象用于指定组件的数据依赖：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">const</span> CommentWithRelay <span class=\\\"token operator\\\">=</span> Relay<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function\\\">createContainer</span><span class=\\\"token punctuation\\\">(</span>Comment<span class=\\\"token punctuation\\\">,</span> config<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>高阶组件最常见签名如下所示：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// React Redux's `connect`</span>\\n<span class=\\\"token keyword\\\">const</span> ConnectedComment <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>commentSelector<span class=\\\"token punctuation\\\">,</span> commentActions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>Comment<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p><em>什么？！</em> 如果你把它剥开，你就很容易看明白到底是怎么回事了。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// connect是一个返回函数的函数（译者注：就是个高阶函数）</span>\\n<span class=\\\"token keyword\\\">const</span> enhance <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>commentListSelector<span class=\\\"token punctuation\\\">,</span> commentListActions<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token comment\\\">// 返回的函数就是一个高阶组件，该高阶组件返回一个组件被连接</span>\\n<span class=\\\"token comment\\\">// 到Redux store</span>\\n<span class=\\\"token keyword\\\">const</span> ConnectedComment <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>CommentList<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<p>换句话说，<code class=\\\"gatsby-code-text\\\">connect</code> 是一个返回高阶组件的高阶函数！</p>\\n<p>这种形式有点让人迷惑，有点多余，但是它有一个有用的性质。那就是，单独一个参数的高阶组件，类似 <code class=\\\"gatsby-code-text\\\">connect</code> 函数返回的，签名是<code class=\\\"gatsby-code-text\\\">Component =&gt; Component</code>。输入和输出类型相同的函数确实是很容易组合在一起。</p>\\n<!-- 对以下代码的个人理解：第一段代码对初始组件进行了两次包装；第二段代码就是函数的柯里化 -->\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// 不要这样做……</span>\\n<span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">withRouter</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>commentSelector<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">)</span>\\n\\n<span class=\\\"token comment\\\">// ……你可以使用一个函数组合工具</span>\\n<span class=\\\"token comment\\\">// compose(f, g, h) 和 (...args) => f(g(h(...args)))是一样的</span>\\n<span class=\\\"token keyword\\\">const</span> enhance <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">compose</span><span class=\\\"token punctuation\\\">(</span>\\n  <span class=\\\"token comment\\\">// 这些都是单独一个参数的高阶组件</span>\\n  withRouter<span class=\\\"token punctuation\\\">,</span>\\n  <span class=\\\"token function\\\">connect</span><span class=\\\"token punctuation\\\">(</span>commentSelector<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token punctuation\\\">)</span>\\n<span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span>\\n</code></pre>\\n      </div>\\n<p>（这个同样的性质也允许<code class=\\\"gatsby-code-text\\\">connect</code>函数和其它增强型高阶组件被用作装饰器，这是一个试验JavaScript建议。）</p>\\n<p>包括lodash（比如说<a href=\\\"https://lodash.com/docs/#flowRight\\\"><code class=\\\"gatsby-code-text\\\">lodash.flowRight</code></a>）, <a href=\\\"http://redux.js.org/docs/api/compose.html\\\"><code class=\\\"gatsby-code-text\\\">Redux</code></a> 和 <a href=\\\"http://ramdajs.com/docs/#compose\\\"><code class=\\\"gatsby-code-text\\\">Ramda</code></a>在内的许多第三方库都提供了类似<code class=\\\"gatsby-code-text\\\">compose</code>功能的函数。</p>\\n<h2 id=\\\"约定：包装显示名字以便于调试\\\"><a href=\\\"#%E7%BA%A6%E5%AE%9A%EF%BC%9A%E5%8C%85%E8%A3%85%E6%98%BE%E7%A4%BA%E5%90%8D%E5%AD%97%E4%BB%A5%E4%BE%BF%E4%BA%8E%E8%B0%83%E8%AF%95\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>约定：包装显示名字以便于调试</h2>\\n<p>高阶组件创建的容器组件在<a href=\\\"https://github.com/facebook/react-devtools\\\"><code class=\\\"gatsby-code-text\\\">React Developer Tools</code></a>中的表现和其它的普通组件是一样的。为了便于调试，可以选择一个显示名字，传达它是一个高阶组件的结果。</p>\\n<p>最常用的技术是包裹显示名字给被包裹的组件。所以，如果你的高阶组件名字是 <code class=\\\"gatsby-code-text\\\">withSubscription</code>，且被包裹的组件的显示名字是 <code class=\\\"gatsby-code-text\\\">CommentList</code>，那么就是用 <code class=\\\"gatsby-code-text\\\">WithSubscription(CommentList)</code>这样的显示名字：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">withSubscription</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">WithSubscription</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/* ... */</span><span class=\\\"token punctuation\\\">}</span>\\n  WithSubscription<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">=</span> <span class=\\\"token template-string\\\"><span class=\\\"token string\\\">`WithSubscription(</span><span class=\\\"token interpolation\\\"><span class=\\\"token interpolation-punctuation punctuation\\\">${</span><span class=\\\"token function\\\">getDisplayName</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token interpolation-punctuation punctuation\\\">}</span></span><span class=\\\"token string\\\">)`</span></span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> WithSubscription<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">getDisplayName</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">return</span> WrappedComponent<span class=\\\"token punctuation\\\">.</span>displayName <span class=\\\"token operator\\\">||</span> WrappedComponent<span class=\\\"token punctuation\\\">.</span>name <span class=\\\"token operator\\\">||</span> <span class=\\\"token string\\\">'Component'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<h2 id=\\\"告诫\\\"><a href=\\\"#%E5%91%8A%E8%AF%AB\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>告诫</h2>\\n<p>如果你是React新手，你要知道高阶组件自身也有一些不是太明显的告诫。</p>\\n<h3 id=\\\"不要在render方法内使用高阶组件\\\"><a href=\\\"#%E4%B8%8D%E8%A6%81%E5%9C%A8render%E6%96%B9%E6%B3%95%E5%86%85%E4%BD%BF%E7%94%A8%E9%AB%98%E9%98%B6%E7%BB%84%E4%BB%B6\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>不要在render方法内使用高阶组件</h3>\\n<p>React的差分算法（称为协调）使用组件标识确定是否更新现有的子树或扔掉它并重新挂载一个新的。如果<code class=\\\"gatsby-code-text\\\">render</code>方法返回的组件和前一次渲染返回的组件是完全相同的(<code class=\\\"gatsby-code-text\\\">===</code>)，React就递归地更新子树，这是通过差分它和新的那个完成。如果它们不相等，前一个子树被完全卸载掉。</p>\\n<p>一般而言，你不需要考虑差分算法的原理。但是它和高阶函数有关。因为它意味着你不能在组件的<code class=\\\"gatsby-code-text\\\">render</code>方法之内应用高阶函数到组件：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token function\\\">render</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token comment\\\">// 每一次渲染，都会创建一个新的EnhancedComponent版本</span>\\n  <span class=\\\"token comment\\\">// EnhancedComponent1 !== EnhancedComponent2</span>\\n  <span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>MyComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token comment\\\">// 那引起每一次都会使子对象树完全被卸载/重新加载</span>\\n  <span class=\\\"token keyword\\\">return</span> <span class=\\\"token tag\\\"><span class=\\\"token tag\\\"><span class=\\\"token punctuation\\\">&lt;</span>EnhancedComponent</span> <span class=\\\"token punctuation\\\">/></span></span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这里产生的问题不仅仅是性能问题——还有，重新加载一个组件会引起原有组件的状态和它的所有子组件丢失。</p>\\n<p>相反，应用高阶组件在组件定义的外面，可以使结果组件只创建一次。那么，它的标识将都是一致的遍及多次渲染。这通常是你想要的，无论如何。</p>\\n<p>在很少的情况下，你可能需要动态的应用高阶组件。你也可以在组件的生命周期方法或构造函数中操作。</p>\\n<h3 id=\\\"必须将静态方法做拷贝\\\"><a href=\\\"#%E5%BF%85%E9%A1%BB%E5%B0%86%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%81%9A%E6%8B%B7%E8%B4%9D\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>必须将静态方法做拷贝</h3>\\n<p>有时，在React组件上定义静态方法是十分有用的。例如，Relay容器就暴露一个静态方法<code class=\\\"gatsby-code-text\\\">getFragment</code>便于组合GraphQL的代码片段。</p>\\n<p>当你应用一个高阶组件到一个组件时，尽管，原始组件被包裹于一个容器组件内，也就意味着新组件会没有原始组件的任何静态方法。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// 定义静态方法</span>\\nWrappedComponent<span class=\\\"token punctuation\\\">.</span><span class=\\\"token function-variable function\\\">staticMethod</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token keyword\\\">function</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/*...*/</span><span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token comment\\\">// 使用高阶组件</span>\\n<span class=\\\"token keyword\\\">const</span> EnhancedComponent <span class=\\\"token operator\\\">=</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// 增强型组件没有静态方法</span>\\n<span class=\\\"token keyword\\\">typeof</span> EnhancedComponent<span class=\\\"token punctuation\\\">.</span>staticMethod <span class=\\\"token operator\\\">===</span> <span class=\\\"token string\\\">'undefined'</span> <span class=\\\"token comment\\\">// true</span>\\n</code></pre>\\n      </div>\\n<p>为解决这个问题，在返回之前，将原始组件的方法拷贝给容器：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Enhance</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/*...*/</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token comment\\\">// 必须得知道要拷贝的方法 :(</span>\\n  Enhance<span class=\\\"token punctuation\\\">.</span>staticMethod <span class=\\\"token operator\\\">=</span> WrappedComponent<span class=\\\"token punctuation\\\">.</span>staticMethod<span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> Enhance<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>这样做，就需要你清楚的知道都有哪些静态方法需要拷贝。你可以使用<a href=\\\"https://github.com/mridgway/hoist-non-react-statics\\\">hoist-non-react-statics</a>来帮你自动处理，它会自动拷贝所有非React的静态方法：</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token keyword\\\">import</span> hoistNonReactStatic <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'hoist-non-react-statics'</span><span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">function</span> <span class=\\\"token function\\\">enhance</span><span class=\\\"token punctuation\\\">(</span>WrappedComponent<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n  <span class=\\\"token keyword\\\">class</span> <span class=\\\"token class-name\\\">Enhance</span> <span class=\\\"token keyword\\\">extends</span> <span class=\\\"token class-name\\\">React<span class=\\\"token punctuation\\\">.</span>Component</span> <span class=\\\"token punctuation\\\">{</span><span class=\\\"token comment\\\">/*...*/</span><span class=\\\"token punctuation\\\">}</span>\\n  <span class=\\\"token function\\\">hoistNonReactStatic</span><span class=\\\"token punctuation\\\">(</span>Enhance<span class=\\\"token punctuation\\\">,</span> WrappedComponent<span class=\\\"token punctuation\\\">)</span><span class=\\\"token punctuation\\\">;</span>\\n  <span class=\\\"token keyword\\\">return</span> Enhance<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre>\\n      </div>\\n<p>另外一个可能的解决方案就是分别导出组件自身的静态方法。</p>\\n<div class=\\\"gatsby-highlight\\\">\\n      <pre class=\\\"gatsby-code-jsx\\\"><code class=\\\"gatsby-code-jsx\\\"><span class=\\\"token comment\\\">// Instead of...</span>\\nMyComponent<span class=\\\"token punctuation\\\">.</span>someFunction <span class=\\\"token operator\\\">=</span> someFunction<span class=\\\"token punctuation\\\">;</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token keyword\\\">default</span> MyComponent<span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...export the method separately...</span>\\n<span class=\\\"token keyword\\\">export</span> <span class=\\\"token punctuation\\\">{</span> someFunction <span class=\\\"token punctuation\\\">}</span><span class=\\\"token punctuation\\\">;</span>\\n\\n<span class=\\\"token comment\\\">// ...and in the consuming module, import both</span>\\n<span class=\\\"token keyword\\\">import</span> MyComponent<span class=\\\"token punctuation\\\">,</span> <span class=\\\"token punctuation\\\">{</span> someFunction <span class=\\\"token punctuation\\\">}</span> <span class=\\\"token keyword\\\">from</span> <span class=\\\"token string\\\">'./MyComponent.js'</span><span class=\\\"token punctuation\\\">;</span>\\n</code></pre>\\n      </div>\\n<h3 id=\\\"refs属性不能贯穿传递\\\"><a href=\\\"#refs%E5%B1%9E%E6%80%A7%E4%B8%8D%E8%83%BD%E8%B4%AF%E7%A9%BF%E4%BC%A0%E9%80%92\\\" aria-hidden=\\\"true\\\" class=\\\"anchor\\\"><svg aria-hidden=\\\"true\\\" height=\\\"16\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 16 16\\\" width=\\\"16\\\"><path fill-rule=\\\"evenodd\\\" d=\\\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\\\"></path></svg></a>Refs属性不能贯穿传递</h3>\\n<p>一般来说，高阶组件可以传递所有的props属性给包裹的组件，但是不能传递refs引用。因为并不是像<code class=\\\"gatsby-code-text\\\">key</code>一样，refs是一个伪属性，React对它进行了特殊处理。如果你向一个由高阶组件创建的组件的元素添加ref引用，那么ref指向的是最外层容器组件实例的，而不是被包裹的组件。</p>\\n<p>现在我们提供一个名为 <code class=\\\"gatsby-code-text\\\">React.forwardRef</code> 的 API 来解决这一问题（在 React 16.3 版本中）。<a href=\\\"/docs/forwarding-refs.html\\\">在 refs 传递章节中了解详情</a>。</p>\",\"frontmatter\":{\"title\":\"高阶组件\",\"next\":null,\"prev\":null},\"fields\":{\"path\":\"docs/higher-order-components.md\",\"slug\":\"docs/higher-order-components.html\"}}},\"pathContext\":{\"slug\":\"docs/higher-order-components.html\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/docs-higher-order-components-html.json\n// module id = 897\n// module chunks = 18188278029426"],"sourceRoot":""}