{"data":{"markdownRemark":{"html":"<p><em>Hooks</em> is a new feature proposal that lets you use state and other React features without writing a class. They’re currently in React v16.7.0-alpha and being discussed in <a href=\"https://github.com/reactjs/rfcs/pull/68\">an open RFC</a>.</p>\n<p><em>Hooks</em> 是一个新的特性（提案）用来在不书写class的情况下处理组件的状态. 已经部署在最新的React v16.7.0-alpha版本中，这里有关于它的讨论 <a href=\"https://github.com/reactjs/rfcs/pull/68\">an open RFC</a>.</p>\n<p>The <a href=\"/docs/hooks-intro.html\">previous page</a> introduced Hooks with this example:\n下面这一页介绍了Hooks的一个示例 </p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declare a new state variable, which we'll call \"count\"</span>\n</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>You clicked <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> times<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n        Click me\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>We’ll start learning about Hooks by comparing this code to an equivalent class example.\n我们通过比较类声明组件的方式和函数声明的方式来学习Hooks.</p>\n<h2 id=\"equivalent-class-example\"><a href=\"#equivalent-class-example\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Equivalent Class Example</h2>\n<h2 id=\"这是一个等价的类声明的组件\"><a href=\"#%E8%BF%99%E6%98%AF%E4%B8%80%E4%B8%AA%E7%AD%89%E4%BB%B7%E7%9A%84%E7%B1%BB%E5%A3%B0%E6%98%8E%E7%9A%84%E7%BB%84%E4%BB%B6\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>这是一个等价的类声明的组件</h2>\n<p>If you used classes in React before, this code should look familiar:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>You clicked <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span> times<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n          Click me\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>The state starts as <code class=\"gatsby-code-text\">{ count: 0 }</code>, and we increment <code class=\"gatsby-code-text\">state.count</code> when the user clicks a button by calling <code class=\"gatsby-code-text\">this.setState()</code>. We’ll use snippets from this class throughout the page.\n这个状态从<code class=\"gatsby-code-text\">{ count: 0 }</code>开始，然后在用户点击按钮的时候通过<code class=\"gatsby-code-text\">this.setState()</code>增加 <code class=\"gatsby-code-text\">state.count</code>，我们将在这一整页中使用这个代码段。</p>\n<blockquote>\n<p>Note</p>\n<p>You might be wondering why we’re using a counter here instead of a more realistic example. This is to help us focus on the API while we’re still making our first steps with Hooks.</p>\n</blockquote>\n<blockquote>\n<p>注意</p>\n<p>你可能疑惑为什么我们要使用counter而不是一个更实际的例子，因为我们现在的目的是集中讨论使用钩子的第一步，它的API</p>\n</blockquote>\n<h2 id=\"hooks-and-function-components\"><a href=\"#hooks-and-function-components\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks and Function Components</h2>\n<p>As a reminder, function components in React look like this:</p>\n<h2 id=\"hooks和函数式组件\"><a href=\"#hooks%E5%92%8C%E5%87%BD%E6%95%B0%E5%BC%8F%E7%BB%84%E4%BB%B6\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Hooks和函数式组件</h2>\n<p>提醒一下，React函数组件是这个样子</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Example</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// You can use Hooks here!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>或者:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// You can use Hooks here!</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>You might have previously known these as “stateless components”. We’re now introducing the ability to use React state from these, so we prefer the name “function components”.</p>\n<p>Hooks <strong>don’t</strong> work inside classes. But you can use them instead of writing classes.\n你可能之前使用过无状态组件，而现在要讨论的是在这里使用React的state，所以更适合叫“函数式组件”.</p>\n<p>Hooks 在class声明中<strong>无法使用</strong>，但是你可以使用它来代替类声明</p>\n<h2 id=\"whats-a-hook\"><a href=\"#whats-a-hook\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What’s a Hook?</h2>\n<p>Our new example starts by importing the <code class=\"gatsby-code-text\">useState</code> Hook from React:</p>\n<h2 id=\"什么是hook\"><a href=\"#%E4%BB%80%E4%B9%88%E6%98%AFhook\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么是Hook</h2>\n<p>我们的例子是通过从React中导入一个 <code class=\"gatsby-code-text\">useState</code> 钩子来开始的。</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p><strong>What is a Hook?</strong> A Hook is a special function that lets you “hook into” React features. For example, <code class=\"gatsby-code-text\">useState</code> is a Hook that lets you add React state to function components. We’ll learn other Hooks later.</p>\n<p><strong>什么是钩子函数？</strong>钩子函数是一个简单的函数，它允许你 “钩入” （hook into）React的特性，例如，<code class=\"gatsby-code-text\">useState</code>是一个允许你在函数式组件中使用React的状态特性的钩子\n<strong>When would I use a Hook?</strong> If you write a function component and realize you need to add some state to it, previously you had to convert it to a class. Now you can use a Hook inside the existing function component. We’re going to do that right now!\n<strong>我该在什么时候使用钩子函数？</strong>如果你编写了一个函数式组件，并且意识到你需要在上面添加一些必要的状态的时候使用它，当然，你必须从类声明中转变过来，现在你可以在已经存在的函数式组件中使用钩子函数(Hook)，我们现在就开始。</p>\n<blockquote>\n<p>Note:</p>\n<p>There are some special rules about where you can and can’t use Hooks within a component. We’ll learn them in <a href=\"/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n</blockquote>\n<blockquote>\n<p>注意:</p>\n<p>有一些特殊的规则，你在组件的某些地方不可以使用钩子函数<a href=\"/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n</blockquote>\n<h2 id=\"declaring-a-state-variable\"><a href=\"#declaring-a-state-variable\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Declaring a State Variable</h2>\n<p>In a class, we initialize the <code class=\"gatsby-code-text\">count</code> state to <code class=\"gatsby-code-text\">0</code> by setting <code class=\"gatsby-code-text\">this.state</code> to <code class=\"gatsby-code-text\">{ count: 0 }</code> in the constructor:</p>\n<h2 id=\"声明一个状态变量\"><a href=\"#%E5%A3%B0%E6%98%8E%E4%B8%80%E4%B8%AA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>声明一个状态变量</h2>\n<p>在类中的构造函数里面，我们通过设置<code class=\"gatsby-code-text\">this.state</code>为<code class=\"gatsby-code-text\">{count:0}</code>,从而初始化<code class=\"gatsby-code-text\">count</code>状态为<code class=\"gatsby-code-text\">0</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Example</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n</span><span class=\"gatsby-highlight-code-line\">      count<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n</span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</span>  <span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>In a function component, we have no <code class=\"gatsby-code-text\">this</code>, so we can’t assign or read <code class=\"gatsby-code-text\">this.state</code>. Instead, we call the <code class=\"gatsby-code-text\">useState</code> Hook directly inside our component:</p>\n<p>在一个函数式组件中，我们没有<code class=\"gatsby-code-text\">this</code>，所以不用赋值或者读取<code class=\"gatsby-code-text\">this.state</code>,与之相对应的，我们直接在组件中调用<code class=\"gatsby-code-text\">useState</code>这个钩子函数</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declare a new state variable, which we'll call \"count\"</span>\n</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n      </div>\n<p><strong>What does calling <code class=\"gatsby-code-text\">useState</code> do?</strong> It declares a “state variable”. Our variable is called <code class=\"gatsby-code-text\">count</code> but we could call it anything else, like <code class=\"gatsby-code-text\">banana</code>. This is a way to “preserve” some values between the function calls — <code class=\"gatsby-code-text\">useState</code> is a new way to use the exact same capabilities that <code class=\"gatsby-code-text\">this.state</code> provides in a class. Normally, variables “disappear” when the function exits but state variables are preserved by React.\n<strong>这个叫做<code class=\"gatsby-code-text\">useState</code>的东西做了什么</strong> 它声明了一个”状态变量”,此时我们的变量叫做<code class=\"gatsby-code-text\">count</code>，当然我们也可以给它任意取一个名字，像“香蕉”“苹果”什么的，这是一种在函数调用中保存值的手段————<code class=\"gatsby-code-text\">useState</code>是一个新的方法来实现<code class=\"gatsby-code-text\">this.state</code>在class中所实现的相同的功能，通常情况下，变量在函数调用之后会”消失”，但是在这里，React会将变量保存在自身。\n<strong>What do we pass to <code class=\"gatsby-code-text\">useState</code> as an argument?</strong> The only argument to the <code class=\"gatsby-code-text\">useState()</code> Hook is the initial state. Unlike with classes, the state doesn’t have to be an object. We can keep a number or a string if that’s all we need. In our example, we just want a number for how many times the user clicked, so pass <code class=\"gatsby-code-text\">0</code> as initial state for our variable. (If we wanted to store two different values in state, we would call <code class=\"gatsby-code-text\">useState()</code> twice.)\n<strong>如何通过<code class=\"gatsby-code-text\">useState</code>来传递参数？</strong><code class=\"gatsby-code-text\">useState</code>钩子唯一的参数就是初始化参数，不像在类组件中，函数式组件中的状态不是一个对象，如果需要的话，我们可以保存一个数字，或者一个字符串，在这个示例中，我们刚刚想要一个数字来显示用户点击的次数，所以设置<code class=\"gatsby-code-text\">0</code>作为初始化状态（如果想要存储两个不同的值，必须再调一次<code class=\"gatsby-code-text\">useState()</code>）\n<strong>What does <code class=\"gatsby-code-text\">useState</code> return?</strong> It returns a pair of values: the current state and a function that updates it. This is why we write <code class=\"gatsby-code-text\">const [count, setCount] = useState()</code>. This is similar to <code class=\"gatsby-code-text\">this.state.count</code> and <code class=\"gatsby-code-text\">this.setState</code> in a class, except you get them in a pair. If you’re not familiar with the syntax we used, we’ll come back to it <a href=\"/docs/hooks-state.html#tip-what-do-square-brackets-mean\">at the bottom of this page</a>.\n<strong>使用<code class=\"gatsby-code-text\">useState</code>得到什么？</strong>它会返回一对值：变化的状态变量和一个用来更新该状态的函数，也就是我们编写的<code class=\"gatsby-code-text\">const [count, setCount] = useState()</code>,如果你对使用的语法不熟悉，可以返回<a href=\"/docs/hooks-state.html#tip-what-do-square-brackets-mean\">页面顶部</a>.\nNow that we know what the <code class=\"gatsby-code-text\">useState</code> Hook does, our example should make more sense:\n现在，已经知道了<code class=\"gatsby-code-text\">useState</code>钩子的作用，我们的例子就更有意义了</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// Declare a new state variable, which we'll call \"count\"</span>\n</span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span></code></pre>\n      </div>\n<p>We declare a state variable called <code class=\"gatsby-code-text\">count</code>, and set it to <code class=\"gatsby-code-text\">0</code>. React will remember its current value between re-renders, and provide the most recent one to our function. If we want to update the current <code class=\"gatsby-code-text\">count</code>, we can call <code class=\"gatsby-code-text\">setCount</code>.\n我们声明了一个状态变量，名字是<code class=\"gatsby-code-text\">count</code>，设置它的值是<code class=\"gatsby-code-text\">0</code>，React会在重新渲染的时候记得它的值，提供最新的一个给函数，如果我们想要更新变化的<code class=\"gatsby-code-text\">count</code>，直接调用<code class=\"gatsby-code-text\">setCount。</code></p>\n<blockquote>\n<p>Note</p>\n<p>You might be wondering: why is <code class=\"gatsby-code-text\">useState</code> not named <code class=\"gatsby-code-text\">createState</code> instead?</p>\n<p>“Create” wouldn’t be quite accurate because the state is only created the first time our component renders. During the next renders, <code class=\"gatsby-code-text\">useState</code> gives us the current state. Otherwise it wouldn’t be “state” at all! There’s also a reason why Hook names <em>always</em> start with <code class=\"gatsby-code-text\">use</code>. We’ll learn why later in the <a href=\"/docs/hooks-rules.html\">Rules of Hooks</a>.\n注意</p>\n<p>你可能会疑惑：为什么<code class=\"gatsby-code-text\">useState</code>不叫做<code class=\"gatsby-code-text\">createState</code>?</p>\n<p>“创建”(create)不太准确，因为状态只在第一次渲染的时候创建，在接下来的渲染过程中，<code class=\"gatsby-code-text\">useState</code>返回的是变化后的值，另外，它已经不再是”状态”，还有很多理由说明为何使用<code class=\"gatsby-code-text\">use</code>，我们会在后面了解更多相关的信息<a href=\"/docs/hooks-rules.html\">Rules of Hooks</a>.</p>\n</blockquote>\n<h2 id=\"reading-state\"><a href=\"#reading-state\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reading State</h2>\n<p>When we want to display the current count in a class, we read <code class=\"gatsby-code-text\">this.state.count</code>:</p>\n<h2 id=\"渲染状态\"><a href=\"#%E6%B8%B2%E6%9F%93%E7%8A%B6%E6%80%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>渲染状态</h2>\n<p>当我们想要在类组件中展示变化的count，我们读取<code class=\"gatsby-code-text\">this.state.count</code>:</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>You clicked <span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count<span class=\"token punctuation\">}</span> times<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n      </div>\n<p>In a function, we can use <code class=\"gatsby-code-text\">count</code> directly:\n在函数中，我们可以直接使用<code class=\"gatsby-code-text\">count</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>You clicked <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> times<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n      </div>\n<h2 id=\"updating-state\"><a href=\"#updating-state\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating State</h2>\n<h2 id=\"更新状态\"><a href=\"#%E6%9B%B4%E6%96%B0%E7%8A%B6%E6%80%81\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>更新状态</h2>\n<p>In a class, we need to call <code class=\"gatsby-code-text\">this.setState()</code> to update the <code class=\"gatsby-code-text\">count</code> state:\n在类中，我们需要调用<code class=\"gatsby-code-text\">this.setState()</code>来更新<code class=\"gatsby-code-text\">count</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> count<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n</span>    Click me\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n      </div>\n<p>In a function, we already have <code class=\"gatsby-code-text\">setCount</code> and <code class=\"gatsby-code-text\">count</code> as variables so we don’t need <code class=\"gatsby-code-text\">this</code>:\n在函数中，我们已经有了<code class=\"gatsby-code-text\">setCount</code>和<code class=\"gatsby-code-text\">count</code>作为变量，所以我们需要<code class=\"gatsby-code-text\">this</code></p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n</span>    Click me\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n      </div>\n<h2 id=\"recap\"><a href=\"#recap\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Recap</h2>\n<h2 id=\"重申\"><a href=\"#%E9%87%8D%E7%94%B3\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重申</h2>\n<p>Let’s now <strong>recap what we learned line by line</strong> and check our understanding.\n我们现在重新来一行一行理解刚才所讲的东西</p>\n<!--\n  I'm not proud of this line markup. Please somebody fix this.\n  But if GitHub got away with it for years we can cheat.\n  我对行注释不是很自信，要是谁可以帮我补充一些\n-->\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>  <span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span> \n <span class=\"token number\">3</span><span class=\"token punctuation\">:</span>  <span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">4</span><span class=\"token punctuation\">:</span>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span> <span class=\"token number\">5</span><span class=\"token punctuation\">:</span>\n <span class=\"token number\">6</span><span class=\"token punctuation\">:</span>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n <span class=\"token number\">7</span><span class=\"token punctuation\">:</span>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n <span class=\"token number\">8</span><span class=\"token punctuation\">:</span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>You clicked <span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span> times<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"gatsby-highlight-code-line\"> <span class=\"token number\">9</span><span class=\"token punctuation\">:</span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span>\n</span><span class=\"token number\">10</span><span class=\"token punctuation\">:</span>         Click me\n<span class=\"token number\">11</span><span class=\"token punctuation\">:</span>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token number\">12</span><span class=\"token punctuation\">:</span>      <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token number\">13</span><span class=\"token punctuation\">:</span>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token number\">14</span><span class=\"token punctuation\">:</span>  <span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<ul>\n<li><strong>Line 1:</strong> We import the <code class=\"gatsby-code-text\">useState</code> Hook from React. It lets us keep local state in a function component.</li>\n<li><strong>Line 1:</strong> 我们从React中导入<code class=\"gatsby-code-text\">useState</code>钩子，它让我们将函数中的状态保存起来</li>\n<li><strong>Line 4:</strong> Inside the <code class=\"gatsby-code-text\">Example</code> component, we declare a new state variable by calling the <code class=\"gatsby-code-text\">useState</code> Hook. It returns a pair of values, to which we give names. We’re calling our variable <code class=\"gatsby-code-text\">count</code> because it holds the number of button clicks. We initialize it to zero by passing <code class=\"gatsby-code-text\">0</code> as the only <code class=\"gatsby-code-text\">useState</code> argument. The second returned item is itself a function. It lets us update the <code class=\"gatsby-code-text\">count</code> so we’ll name it <code class=\"gatsby-code-text\">setCount</code>.</li>\n<li><strong>Line4:</strong> 在<code class=\"gatsby-code-text\">Example</code>组件中，我们通过<code class=\"gatsby-code-text\">useState</code>声明了一个新的状态变量，它返回一对我们给定的值，我们把<code class=\"gatsby-code-text\">count</code>定义为按钮点击的次数，初始化为零，写在<code class=\"gatsby-code-text\">useState</code>的参数中，第二个值是一个函数，用来更新我们<code class=\"gatsby-code-text\">count</code>。</li>\n<li><strong>Line 9:</strong> When the user clicks, we call <code class=\"gatsby-code-text\">setCount</code> with a new value. React will then re-render the <code class=\"gatsby-code-text\">Example</code> component, passing the new <code class=\"gatsby-code-text\">count</code> value to it.</li>\n<li>\n<p><strong>Line9:</strong> 在用户点击的时候，调用<code class=\"gatsby-code-text\">setCount</code>传入一个新的值，React会重新渲染<code class=\"gatsby-code-text\">Examole</code>组件，同一时刻分配这个更新后的<code class=\"gatsby-code-text\">count</code>值\nThis might seem like a lot to take in at first. Don’t rush it! If you’re lost in the explanation, look at the code above again and try to read it from top to bottom. We promise that once you try to “forget” how state works in classes, and look at this code with fresh eyes, it will make sense.\n这个看起来挺不容易理解的，但是不要着急，如果你对某些地方感觉还需要理清思路，重复阅读上面的代码，我们保证，一旦你试图将脑海中class声明的<code class=\"gatsby-code-text\">this.state</code>的方式去除掉，再理解起来，就会很非常轻松。</p>\n<h3 id=\"tip-what-do-square-brackets-mean\"><a href=\"#tip-what-do-square-brackets-mean\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip: What Do Square Brackets Mean?</h3>\n<h3 id=\"小技巧：方括号是什么意思\"><a href=\"#%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A%E6%96%B9%E6%8B%AC%E5%8F%B7%E6%98%AF%E4%BB%80%E4%B9%88%E6%84%8F%E6%80%9D\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小技巧：方括号是什么意思</h3>\n<p>You might have noticed the square brackets when we declare a state variable:\n你也许注意到变量声明时候的方括号</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n</li>\n</ul>\n<p>The names on the left aren’t a part of the React API. You can name your own state variables:\n变量的声明不是ReactAPI的一部分，你可以命名自己的变量</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>This JavaScript syntax is called <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring\">“array destructuring”</a>. It means that we’re making two new variables <code class=\"gatsby-code-text\">fruit</code> and <code class=\"gatsby-code-text\">setFruit</code>, where <code class=\"gatsby-code-text\">fruit</code> is set to the first value returned by <code class=\"gatsby-code-text\">useState</code>, and <code class=\"gatsby-code-text\">setFruit</code> is the second. It is equivalent to this code:\n这个语法是ES6中的解构赋值<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Array_destructuring\">“array destructuring”</a>，表示我们定义了两个变量<code class=\"gatsby-code-text\">fruit</code>和<code class=\"gatsby-code-text\">setFruit</code>，<code class=\"gatsby-code-text\">fruit</code>被设置为<code class=\"gatsby-code-text\">useState</code>的第一个值，<code class=\"gatsby-code-text\">setFruit</code>是第二个，等价于下代码</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token keyword\">var</span> fruitStateVariable <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Returns a pair</span>\n  <span class=\"token keyword\">var</span> fruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// First item in a pair</span>\n  <span class=\"token keyword\">var</span> setFruit <span class=\"token operator\">=</span> fruitStateVariable<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Second item in a pair</span>\n</code></pre>\n      </div>\n<p>When we declare a state variable with <code class=\"gatsby-code-text\">useState</code>, it returns a pair — an array with two items. The first item is the current value, and the second is a function that lets us update it. Using <code class=\"gatsby-code-text\">[0]</code> and <code class=\"gatsby-code-text\">[1]</code> to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.\n当我们使用<code class=\"gatsby-code-text\">useState</code>声明状态变量，它返回一对，带有两个值的数组，第一个参数是变化的状态值，第二个是用来更新该状态的函数，使用<code class=\"gatsby-code-text\">[0]</code>和<code class=\"gatsby-code-text\">[1]</code>来访问会有一些困惑，因为它们有特定的含义，所以我们使用解构赋值来代替。</p>\n<blockquote>\n<p>Note</p>\n<p>You might be curious how React knows which component <code class=\"gatsby-code-text\">useState</code> corresponds to since we’re not passing anything like <code class=\"gatsby-code-text\">this</code> back to React. We’ll answer <a href=\"/docs/hooks-faq.html#how-does-react-associate-hook-calls-with-components\">this question</a> and many others in the FAQ section.\n注意</p>\n<p>你可能感到好奇，为何React知道哪个组件的<code class=\"gatsby-code-text\">useState</code>，因为我们并没有将this之类的东西传递给React，在这里可以找到答案<a href=\"/docs/hooks-faq.html#how-does-react-associate-hook-calls-with-components\">this question</a> and many others in the FAQ section.</p>\n</blockquote>\n<h3 id=\"tip-using-multiple-state-variables\"><a href=\"#tip-using-multiple-state-variables\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tip: Using Multiple State Variables</h3>\n<h3 id=\"小技巧：使用多个状态变量\"><a href=\"#%E5%B0%8F%E6%8A%80%E5%B7%A7%EF%BC%9A%E4%BD%BF%E7%94%A8%E5%A4%9A%E4%B8%AA%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>小技巧：使用多个状态变量</h3>\n<p>Declaring state variables as a pair of <code class=\"gatsby-code-text\">[something, setSomething]</code> is also handy because it lets us give <em>different</em> names to different state variables if we want to use more than one:\n声明状态变量的一对值<code class=\"gatsby-code-text\">[something, setSomething]</code>是很容易的，因为我们使用的是不同的命名，不同的名字返回更多的状态变量</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ExampleWithManyStates</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Declare multiple state variables!</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>age<span class=\"token punctuation\">,</span> setAge<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">42</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>fruit<span class=\"token punctuation\">,</span> setFruit<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'banana'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>todos<span class=\"token punctuation\">,</span> setTodos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> text<span class=\"token punctuation\">:</span> <span class=\"token string\">'Learn Hooks'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n      </div>\n<p>In the above component, we have <code class=\"gatsby-code-text\">age</code>, <code class=\"gatsby-code-text\">fruit</code>, and <code class=\"gatsby-code-text\">todos</code> as local variables, and we can update them individually:\n在下面的这个组件中，有年龄，水果，待办事项，作为本地变量，我们可以分别声明它们</p>\n<div class=\"gatsby-highlight\">\n      <pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\">  <span class=\"token keyword\">function</span> <span class=\"token function\">handleOrangeClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Similar to this.setState({ fruit: 'orange' })</span>\n    <span class=\"token function\">setFruit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'orange'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n      </div>\n<p>You <strong>don’t have to</strong> use many state variables. State variables can hold objects and arrays just fine, so you can still group related data together. However, unlike <code class=\"gatsby-code-text\">this.setState</code> in a class, updating a state variable always <em>replaces</em> it instead of merging it.\n你 <strong>不必</strong> 使用很多状态变量，状态变量可以保持一个对象和一个数组，你也可以将相关联的数据组合到一起，然而，不像类中的<code class=\"gatsby-code-text\">this.setState</code>，更新一个状态的值总是需要<em>替换</em>它，而不是合并它\nWe provide more recommendations on splitting independent state variables <a href=\"/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\">in the FAQ</a>.\n我们提供了更多的分离状态的推荐<a href=\"/docs/hooks-faq.html#should-i-use-one-or-many-state-variables\">in the FAQ</a>.</p>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Next Steps</h2>\n<h2 id=\"下一步\"><a href=\"#%E4%B8%8B%E4%B8%80%E6%AD%A5\" aria-hidden=\"true\" class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>下一步</h2>\n<p>On this page we’ve learned about one of the Hooks provided by React, called <code class=\"gatsby-code-text\">useState</code>. We’re also sometimes going to refer to it as the “State Hook”. It lets us add local state to React function components — which we did for the first time ever!\n在这里我们已经学会了React提供的Hooks，叫做<code class=\"gatsby-code-text\">useState</code>，我们有时候也将它称为“状态钩子”，它让我们添加一个本地的状态给React的函数组件，就像之前那样。\nWe also learned a little bit more about what Hooks are. Hooks are functions that let you “hook into” React features from function components. Their names always start with <code class=\"gatsby-code-text\">use</code>, and there are more Hooks we haven’t seen yet.\n我们已经学会了一些关于钩子函数的东西，钩子函数是一个在函数式组件中使用React状态特性的函数，它们的名字通常以<code class=\"gatsby-code-text\">use</code>开头，有更多的钩子函数我们会在后面看见。\n<strong>Now let’s continue by <a href=\"/docs/hooks-effect.html\">learning the next Hook: <code class=\"gatsby-code-text\">useEffect</code>.</a></strong> It lets you perform side effects in components, and is similar to lifecycle methods in classes.\n<strong>接下来我们继续下一部分<a href=\"/docs/hooks-effect.html\">learning the next Hook: <code class=\"gatsby-code-text\">useEffect</code>.</a></strong>它允许你在组件中使用一些副作用，类似于class中的生命周期函数。</p>","frontmatter":{"title":"Using the State Hook","next":"hooks-effect.html","prev":"hooks-overview.html"},"fields":{"path":"docs/hooks-state.md","slug":"docs/hooks-state.html"}}},"pathContext":{"slug":"docs/hooks-state.html"}}